"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformLocal = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_element_1 = require("./terraform-element");
const tokens_1 = require("./tokens");
/**
 * @experimental
 */
class TerraformLocal extends terraform_element_1.TerraformElement {
    /**
     * @experimental
     */
    constructor(scope, id, expression) {
        super(scope, id);
        this._expression = expression;
    }
    /**
     * @experimental
     */
    set expression(value) {
        this._expression = value;
    }
    /**
     * @experimental
     */
    get expression() {
        return tokens_1.Token.asAny(this.interpolation());
    }
    /**
     * @experimental
     */
    get asString() {
        return tokens_1.Token.asString(this.interpolation());
    }
    /**
     * @experimental
     */
    get asNumber() {
        return tokens_1.Token.asNumber(this.interpolation());
    }
    /**
     * @experimental
     */
    get asList() {
        return tokens_1.Token.asList(this.interpolation());
    }
    /**
     * @experimental
     */
    get asBoolean() {
        return tokens_1.Token.asString(this.interpolation());
    }
    interpolation() {
        return `\${local.${this.friendlyUniqueId}}`;
    }
    /**
     * @experimental
     */
    toTerraform() {
        return {
            locals: {
                [this.friendlyUniqueId]: this._expression
            }
        };
    }
}
exports.TerraformLocal = TerraformLocal;
_a = JSII_RTTI_SYMBOL_1;
TerraformLocal[_a] = { fqn: "cdktf.TerraformLocal", version: "0.4.1" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLWxvY2FsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVycmFmb3JtLWxvY2FsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsMkRBQXVEO0FBQ3ZELHFDQUFpQzs7OztBQUVqQyxNQUFhLGNBQWUsU0FBUSxvQ0FBZ0I7Ozs7SUFHaEQsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxVQUFlO1FBQ3JELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7SUFDbEMsQ0FBQzs7OztJQUVELElBQVcsVUFBVSxDQUFDLEtBQVU7UUFDNUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELElBQVcsVUFBVTtRQUNqQixPQUFPLGNBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7OztJQUVELElBQVcsUUFBUTtRQUNmLE9BQU8sY0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7O0lBRUQsSUFBVyxRQUFRO1FBQ2YsT0FBTyxjQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Ozs7SUFFRCxJQUFXLE1BQU07UUFDYixPQUFPLGNBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7OztJQUVELElBQVcsU0FBUztRQUNoQixPQUFPLGNBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFtQixDQUFBO0lBQ2pFLENBQUM7SUFFTyxhQUFhO1FBQ2pCLE9BQU8sWUFBWSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQTtJQUMvQyxDQUFDOzs7O0lBRU0sV0FBVztRQUNkLE9BQU87WUFDSCxNQUFNLEVBQUU7Z0JBQ0osQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVzthQUM1QztTQUNKLENBQUM7SUFDTixDQUFDOztBQTNDTCx3Q0E0Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtRWxlbWVudCB9IGZyb20gXCIuL3RlcnJhZm9ybS1lbGVtZW50XCI7XG5pbXBvcnQgeyBUb2tlbiB9IGZyb20gXCIuL3Rva2Vuc1wiO1xuXG5leHBvcnQgY2xhc3MgVGVycmFmb3JtTG9jYWwgZXh0ZW5kcyBUZXJyYWZvcm1FbGVtZW50IHtcbiAgICBwcml2YXRlIF9leHByZXNzaW9uOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBleHByZXNzaW9uOiBhbnkpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICB0aGlzLl9leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGV4cHJlc3Npb24odmFsdWU6IGFueSkge1xuICAgICAgICB0aGlzLl9leHByZXNzaW9uID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBleHByZXNzaW9uKCkge1xuICAgICAgICByZXR1cm4gVG9rZW4uYXNBbnkodGhpcy5pbnRlcnBvbGF0aW9uKCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgYXNTdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFRva2VuLmFzU3RyaW5nKHRoaXMuaW50ZXJwb2xhdGlvbigpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGFzTnVtYmVyKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBUb2tlbi5hc051bWJlcih0aGlzLmludGVycG9sYXRpb24oKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBhc0xpc3QoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gVG9rZW4uYXNMaXN0KHRoaXMuaW50ZXJwb2xhdGlvbigpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGFzQm9vbGVhbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIFRva2VuLmFzU3RyaW5nKHRoaXMuaW50ZXJwb2xhdGlvbigpKSBhcyBhbnkgYXMgYm9vbGVhblxuICAgIH1cblxuICAgIHByaXZhdGUgaW50ZXJwb2xhdGlvbigpOiBhbnkge1xuICAgICAgICByZXR1cm4gYFxcJHtsb2NhbC4ke3RoaXMuZnJpZW5kbHlVbmlxdWVJZH19YFxuICAgIH1cblxuICAgIHB1YmxpYyB0b1RlcnJhZm9ybSgpOiBhbnkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9jYWxzOiB7XG4gICAgICAgICAgICAgICAgW3RoaXMuZnJpZW5kbHlVbmlxdWVJZF06IHRoaXMuX2V4cHJlc3Npb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59Il19