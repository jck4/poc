"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Manifest = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
const path = require("path");
const fs = require("fs");
/**
 * @experimental
 */
class Manifest {
    /**
     * @experimental
     */
    constructor(version, outdir) {
        this.version = version;
        this.outdir = outdir;
        /**
         * @experimental
         */
        this.stacks = [];
        const stacksPath = path.join(this.outdir, Manifest.stacksFolder);
        if (!fs.existsSync(stacksPath))
            fs.mkdirSync(stacksPath);
    }
    /**
     * @experimental
     */
    forStack(stack) {
        const node = constructs_1.Node.of(stack);
        const manifest = {
            name: node.id,
            constructPath: node.path,
            workingDirectory: path.join(Manifest.stacksFolder, node.id),
            synthesizedStackPath: path.join(Manifest.stacksFolder, node.id, Manifest.stackFileName)
        };
        this.stacks.push(manifest);
        return manifest;
    }
    /**
     * @experimental
     */
    buildManifest() {
        return {
            version: this.version,
            stacks: this.stacks.reduce((newObject, stack) => {
                newObject[stack.name] = stack;
                return newObject;
            }, {})
        };
    }
    /**
     * @experimental
     */
    writeToFile() {
        fs.writeFileSync(path.join(this.outdir, Manifest.fileName), JSON.stringify(this.buildManifest(), undefined, 2));
    }
}
exports.Manifest = Manifest;
_a = JSII_RTTI_SYMBOL_1;
Manifest[_a] = { fqn: "cdktf.Manifest", version: "0.4.1" };
/**
 * @experimental
 */
Manifest.fileName = 'manifest.json';
/**
 * @experimental
 */
Manifest.stacksFolder = 'stacks';
/**
 * @experimental
 */
Manifest.stackFileName = 'cdk.tf.json';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuaWZlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtYW5pZmVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUFrQztBQUNsQyw2QkFBNkI7QUFDN0IseUJBQXlCOzs7O0FBVXpCLE1BQWEsUUFBUTs7OztJQU9uQixZQUE0QixPQUFlLEVBQWtCLE1BQWM7UUFBL0MsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUFrQixXQUFNLEdBQU4sTUFBTSxDQUFROzs7O1FBRjNELFdBQU0sR0FBb0IsRUFBRSxDQUFDO1FBRzNDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDaEUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDO1lBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMzRCxDQUFDOzs7O0lBRU0sUUFBUSxDQUFDLEtBQXFCO1FBQ25DLE1BQU0sSUFBSSxHQUFHLGlCQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQzNCLE1BQU0sUUFBUSxHQUFHO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ2IsYUFBYSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ3hCLGdCQUFnQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQzNELG9CQUFvQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUM7U0FDeEYsQ0FBQTtRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBRTFCLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7Ozs7SUFFTSxhQUFhO1FBQ2xCLE9BQU87WUFDTCxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBd0MsRUFBRSxLQUFvQixFQUFFLEVBQUU7Z0JBQzVGLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUM5QixPQUFPLFNBQVMsQ0FBQTtZQUNsQixDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQ1AsQ0FBQTtJQUNILENBQUM7Ozs7SUFFTSxXQUFXO1FBQ2hCLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsSCxDQUFDOztBQXJDSCw0QkFzQ0M7Ozs7OztBQXJDd0IsaUJBQVEsR0FBRyxlQUFlLENBQUM7Ozs7QUFDM0IscUJBQVksR0FBRyxRQUFRLENBQUM7Ozs7QUFDeEIsc0JBQWEsR0FBRyxhQUFhLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlIH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgVGVycmFmb3JtU3RhY2sgfSBmcm9tICcuL3RlcnJhZm9ybS1zdGFjayc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhY2tNYW5pZmVzdCB7XG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgY29uc3RydWN0UGF0aDogc3RyaW5nO1xuICByZWFkb25seSBzeW50aGVzaXplZFN0YWNrUGF0aDogc3RyaW5nO1xuICByZWFkb25seSB3b3JraW5nRGlyZWN0b3J5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBNYW5pZmVzdCB7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgZmlsZU5hbWUgPSAnbWFuaWZlc3QuanNvbic7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgc3RhY2tzRm9sZGVyID0gJ3N0YWNrcyc7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgc3RhY2tGaWxlTmFtZSA9ICdjZGsudGYuanNvbic7XG5cbiAgcHVibGljIHJlYWRvbmx5IHN0YWNrczogU3RhY2tNYW5pZmVzdFtdID0gW107XG5cbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHZlcnNpb246IHN0cmluZywgcHVibGljIHJlYWRvbmx5IG91dGRpcjogc3RyaW5nKSB7XG4gICAgY29uc3Qgc3RhY2tzUGF0aCA9IHBhdGguam9pbih0aGlzLm91dGRpciwgTWFuaWZlc3Quc3RhY2tzRm9sZGVyKVxuICAgIGlmICghZnMuZXhpc3RzU3luYyhzdGFja3NQYXRoKSkgZnMubWtkaXJTeW5jKHN0YWNrc1BhdGgpO1xuICB9XG5cbiAgcHVibGljIGZvclN0YWNrKHN0YWNrOiBUZXJyYWZvcm1TdGFjayk6IFN0YWNrTWFuaWZlc3Qge1xuICAgIGNvbnN0IG5vZGUgPSBOb2RlLm9mKHN0YWNrKVxuICAgIGNvbnN0IG1hbmlmZXN0ID0ge1xuICAgICAgbmFtZTogbm9kZS5pZCxcbiAgICAgIGNvbnN0cnVjdFBhdGg6IG5vZGUucGF0aCxcbiAgICAgIHdvcmtpbmdEaXJlY3Rvcnk6IHBhdGguam9pbihNYW5pZmVzdC5zdGFja3NGb2xkZXIsIG5vZGUuaWQpLFxuICAgICAgc3ludGhlc2l6ZWRTdGFja1BhdGg6IHBhdGguam9pbihNYW5pZmVzdC5zdGFja3NGb2xkZXIsIG5vZGUuaWQsIE1hbmlmZXN0LnN0YWNrRmlsZU5hbWUpXG4gICAgfVxuICAgIHRoaXMuc3RhY2tzLnB1c2gobWFuaWZlc3QpXG5cbiAgICByZXR1cm4gbWFuaWZlc3Q7XG4gIH1cblxuICBwdWJsaWMgYnVpbGRNYW5pZmVzdCgpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICB2ZXJzaW9uOiB0aGlzLnZlcnNpb24sXG4gICAgICBzdGFja3M6IHRoaXMuc3RhY2tzLnJlZHVjZSgobmV3T2JqZWN0OiBSZWNvcmQ8c3RyaW5nLCBTdGFja01hbmlmZXN0Piwgc3RhY2s6IFN0YWNrTWFuaWZlc3QpID0+IHtcbiAgICAgICAgbmV3T2JqZWN0W3N0YWNrLm5hbWVdID0gc3RhY2s7XG4gICAgICAgIHJldHVybiBuZXdPYmplY3RcbiAgICAgIH0sIHt9KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB3cml0ZVRvRmlsZSgpIHtcbiAgICBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbih0aGlzLm91dGRpciwgTWFuaWZlc3QuZmlsZU5hbWUpLCBKU09OLnN0cmluZ2lmeSh0aGlzLmJ1aWxkTWFuaWZlc3QoKSwgdW5kZWZpbmVkLCAyKSk7XG4gIH1cbn1cbiJdfQ==