"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformModule = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_element_1 = require("./terraform-element");
const terraform_provider_1 = require("./terraform-provider");
const util_1 = require("./util");
const tokens_1 = require("./tokens");
const path = require("path");
/**
 * @experimental
 */
class TerraformModule extends terraform_element_1.TerraformElement {
    /**
     * @experimental
     */
    constructor(scope, id, options) {
        super(scope, id);
        if (options.source.startsWith('./') || options.source.startsWith('../')) {
            this.source = path.join('..', options.source);
        }
        else {
            this.source = options.source;
        }
        this.version = options.version;
        this._providers = options.providers;
        if (Array.isArray(options.dependsOn)) {
            this.dependsOn = options.dependsOn.map(dependency => dependency.fqn);
        }
    }
    // jsii can't handle abstract classes?
    /**
     * @experimental
     */
    synthesizeAttributes() {
        return {};
    }
    /**
     * @experimental
     */
    interpolationForOutput(moduleOutput) {
        return `\${module.${this.friendlyUniqueId}.${moduleOutput}}`;
    }
    /**
     * @experimental
     */
    get fqn() {
        return tokens_1.Token.asString(`module.${this.friendlyUniqueId}`);
    }
    /**
     * @experimental
     */
    get providers() {
        return this._providers;
    }
    /**
     * @experimental
     */
    addProvider(provider) {
        if (!this._providers) {
            this._providers = [];
        }
        this._providers.push(provider);
    }
    /**
     * @experimental
     */
    toTerraform() {
        var _b;
        const attributes = util_1.deepMerge({
            ...this.synthesizeAttributes(),
            source: this.source,
            version: this.version,
            providers: (_b = this.providers) === null || _b === void 0 ? void 0 : _b.map(p => {
                if (p instanceof terraform_provider_1.TerraformProvider) {
                    return { [p.terraformResourceType]: p.fqn };
                }
                else {
                    return { [`${p.provider.terraformResourceType}.${p.moduleAlias}`]: p.provider.fqn };
                }
            }),
            // eslint-disable-next-line @typescript-eslint/camelcase
            depends_on: this.dependsOn,
        }, this.rawOverrides);
        attributes['//'] = this.constructNodeMetadata;
        return {
            module: {
                [this.friendlyUniqueId]: attributes
            }
        };
    }
}
exports.TerraformModule = TerraformModule;
_a = JSII_RTTI_SYMBOL_1;
TerraformModule[_a] = { fqn: "cdktf.TerraformModule", version: "0.4.1" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLW1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlcnJhZm9ybS1tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSwyREFBdUQ7QUFDdkQsNkRBQXlEO0FBQ3pELGlDQUFtQztBQUVuQyxxQ0FBaUM7QUFDakMsNkJBQTZCOzs7O0FBYzdCLE1BQXNCLGVBQWdCLFNBQVEsb0NBQWdCOzs7O0lBTzVELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsT0FBK0I7UUFDdkUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3ZFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQy9DO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUE7U0FDN0I7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDL0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQ3BDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN0RTtJQUNILENBQUM7SUFFRCxzQ0FBc0M7Ozs7SUFDNUIsb0JBQW9CO1FBQzVCLE9BQU8sRUFBRSxDQUFBO0lBQ1gsQ0FBQzs7OztJQUVNLHNCQUFzQixDQUFDLFlBQW9CO1FBQ2hELE9BQU8sYUFBYSxJQUFJLENBQUMsZ0JBQWdCLElBQUksWUFBWSxHQUFVLENBQUM7SUFDdEUsQ0FBQzs7OztJQUVELElBQVcsR0FBRztRQUNaLE9BQU8sY0FBSyxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDM0QsQ0FBQzs7OztJQUVELElBQVcsU0FBUztRQUNsQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQzs7OztJQUVNLFdBQVcsQ0FBQyxRQUFxRDtRQUNwRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNsQixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztTQUN4QjtRQUNELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFUSxXQUFXOztRQUNoQixNQUFNLFVBQVUsR0FBRyxnQkFBUyxDQUFDO1lBQzNCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFO1lBQzlCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsU0FBUyxRQUFFLElBQUksQ0FBQyxTQUFTLDBDQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDakMsSUFBSSxDQUFDLFlBQVksc0NBQWlCLEVBQUU7b0JBQ2hDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztpQkFDL0M7cUJBQ0k7b0JBQ0QsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLHFCQUFxQixJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7aUJBQ3ZGO1lBQ0gsQ0FBQyxDQUFDO1lBQ0Ysd0RBQXdEO1lBQ3hELFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUztTQUMzQixFQUNDLElBQUksQ0FBQyxZQUFZLENBQ2xCLENBQUE7UUFFRCxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFBO1FBRTdDLE9BQU87WUFDTCxNQUFNLEVBQUU7Z0JBQ04sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxVQUFVO2FBQ3BDO1NBQ0YsQ0FBQTtJQUNILENBQUM7O0FBeEVILDBDQXlFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1FbGVtZW50IH0gZnJvbSBcIi4vdGVycmFmb3JtLWVsZW1lbnRcIjtcbmltcG9ydCB7IFRlcnJhZm9ybVByb3ZpZGVyIH0gZnJvbSBcIi4vdGVycmFmb3JtLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBkZWVwTWVyZ2UgfSBmcm9tIFwiLi91dGlsXCI7XG5pbXBvcnQgeyBJVGVycmFmb3JtRGVwZW5kYWJsZSB9IGZyb20gXCIuL3RlcnJhZm9ybS1kZXBlbmRhYmxlXCI7XG5pbXBvcnQgeyBUb2tlbiB9IGZyb20gXCIuL3Rva2Vuc1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuZXhwb3J0IGludGVyZmFjZSBUZXJyYWZvcm1Nb2R1bGVPcHRpb25zIHtcbiAgcmVhZG9ubHkgc291cmNlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHZlcnNpb24/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHByb3ZpZGVycz86IChUZXJyYWZvcm1Qcm92aWRlciB8IFRlcnJhZm9ybU1vZHVsZVByb3ZpZGVyKVtdO1xuICByZWFkb25seSBkZXBlbmRzT24/OiBJVGVycmFmb3JtRGVwZW5kYWJsZVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRlcnJhZm9ybU1vZHVsZVByb3ZpZGVyIHtcbiAgcmVhZG9ubHkgcHJvdmlkZXI6IFRlcnJhZm9ybVByb3ZpZGVyO1xuICByZWFkb25seSBtb2R1bGVBbGlhczogc3RyaW5nO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGVycmFmb3JtTW9kdWxlIGV4dGVuZHMgVGVycmFmb3JtRWxlbWVudCBpbXBsZW1lbnRzIElUZXJyYWZvcm1EZXBlbmRhYmxlIHtcblxuICBwdWJsaWMgcmVhZG9ubHkgc291cmNlOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSB2ZXJzaW9uPzogc3RyaW5nO1xuICBwcml2YXRlIF9wcm92aWRlcnM/OiAoVGVycmFmb3JtUHJvdmlkZXIgfCBUZXJyYWZvcm1Nb2R1bGVQcm92aWRlcilbXTtcbiAgcHVibGljIGRlcGVuZHNPbj86IHN0cmluZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIG9wdGlvbnM6IFRlcnJhZm9ybU1vZHVsZU9wdGlvbnMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgaWYgKG9wdGlvbnMuc291cmNlLnN0YXJ0c1dpdGgoJy4vJykgfHwgb3B0aW9ucy5zb3VyY2Uuc3RhcnRzV2l0aCgnLi4vJykpIHtcbiAgICAgIHRoaXMuc291cmNlID0gcGF0aC5qb2luKCcuLicsIG9wdGlvbnMuc291cmNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zb3VyY2UgPSBvcHRpb25zLnNvdXJjZVxuICAgIH1cbiAgICB0aGlzLnZlcnNpb24gPSBvcHRpb25zLnZlcnNpb247XG4gICAgdGhpcy5fcHJvdmlkZXJzID0gb3B0aW9ucy5wcm92aWRlcnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5kZXBlbmRzT24pKSB7XG4gICAgICB0aGlzLmRlcGVuZHNPbiA9IG9wdGlvbnMuZGVwZW5kc09uLm1hcChkZXBlbmRlbmN5ID0+IGRlcGVuZGVuY3kuZnFuKTtcbiAgICB9XG4gIH1cblxuICAvLyBqc2lpIGNhbid0IGhhbmRsZSBhYnN0cmFjdCBjbGFzc2VzP1xuICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUF0dHJpYnV0ZXMoKTogeyBbbmFtZTogc3RyaW5nXTogYW55IH0ge1xuICAgIHJldHVybiB7fVxuICB9XG5cbiAgcHVibGljIGludGVycG9sYXRpb25Gb3JPdXRwdXQobW9kdWxlT3V0cHV0OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYFxcJHttb2R1bGUuJHt0aGlzLmZyaWVuZGx5VW5pcXVlSWR9LiR7bW9kdWxlT3V0cHV0fX1gIGFzIGFueTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZnFuKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFRva2VuLmFzU3RyaW5nKGBtb2R1bGUuJHt0aGlzLmZyaWVuZGx5VW5pcXVlSWR9YCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHByb3ZpZGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvdmlkZXJzO1xufVxuXG5wdWJsaWMgYWRkUHJvdmlkZXIocHJvdmlkZXI6IFRlcnJhZm9ybVByb3ZpZGVyIHwgVGVycmFmb3JtTW9kdWxlUHJvdmlkZXIpIHtcbiAgICBpZiAoIXRoaXMuX3Byb3ZpZGVycykge1xuICAgICAgICB0aGlzLl9wcm92aWRlcnMgPSBbXTtcbiAgICB9XG4gICAgdGhpcy5fcHJvdmlkZXJzLnB1c2gocHJvdmlkZXIpO1xufVxuXG4gIHB1YmxpYyB0b1RlcnJhZm9ybSgpOiBhbnkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBkZWVwTWVyZ2Uoe1xuICAgICAgLi4udGhpcy5zeW50aGVzaXplQXR0cmlidXRlcygpLFxuICAgICAgc291cmNlOiB0aGlzLnNvdXJjZSxcbiAgICAgIHZlcnNpb246IHRoaXMudmVyc2lvbixcbiAgICAgIHByb3ZpZGVyczogdGhpcy5wcm92aWRlcnM/Lm1hcChwID0+IHtcbiAgICAgICAgaWYgKHAgaW5zdGFuY2VvZiBUZXJyYWZvcm1Qcm92aWRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgW3AudGVycmFmb3JtUmVzb3VyY2VUeXBlXTogcC5mcW4gfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IFtgJHtwLnByb3ZpZGVyLnRlcnJhZm9ybVJlc291cmNlVHlwZX0uJHtwLm1vZHVsZUFsaWFzfWBdOiBwLnByb3ZpZGVyLmZxbiB9O1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY2FtZWxjYXNlXG4gICAgICBkZXBlbmRzX29uOiB0aGlzLmRlcGVuZHNPbixcbiAgICB9LFxuICAgICAgdGhpcy5yYXdPdmVycmlkZXNcbiAgICApXG5cbiAgICBhdHRyaWJ1dGVzWycvLyddID0gdGhpcy5jb25zdHJ1Y3ROb2RlTWV0YWRhdGFcblxuICAgIHJldHVybiB7XG4gICAgICBtb2R1bGU6IHtcbiAgICAgICAgW3RoaXMuZnJpZW5kbHlVbmlxdWVJZF06IGF0dHJpYnV0ZXNcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0iXX0=