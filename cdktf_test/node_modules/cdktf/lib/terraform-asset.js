"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformAsset = exports.AssetType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
const fs = require("fs");
const path = require("path");
const fs_1 = require("./private/fs");
const resource_1 = require("./resource");
/**
 * @experimental
 */
var AssetType;
(function (AssetType) {
    AssetType[AssetType["FILE"] = 0] = "FILE";
    AssetType[AssetType["DIRECTORY"] = 1] = "DIRECTORY";
    AssetType[AssetType["ARCHIVE"] = 2] = "ARCHIVE";
})(AssetType = exports.AssetType || (exports.AssetType = {}));
const ARCHIVE_NAME = "archive.zip";
const ASSETS_DIRECTORY = "assets";
/**
 * @experimental
 */
class TerraformAsset extends resource_1.Resource {
    /**
     * (experimental) A Terraform Asset takes a file or directory outside of the CDK for Terraform context and moves it into it.
     *
     * Assets copy referenced files into the stacks context for further usage in other resources.
     *
     * @experimental
     */
    constructor(scope, id, config) {
        var _b;
        super(scope, id);
        if (!path.isAbsolute(config.path)) {
            throw new Error(`TerraformAsset path needs to be absolute, got relative path: '${config.path}'`);
        }
        const stat = fs.statSync(config.path);
        const inferredType = stat.isFile() ? AssetType.FILE : AssetType.DIRECTORY;
        this.type = (_b = config.type) !== null && _b !== void 0 ? _b : inferredType;
        this.sourcePath = config.path;
        this.assetHash = config.assetHash || fs_1.hashPath(this.sourcePath);
        if (stat.isFile() && this.type !== AssetType.FILE) {
            throw new Error(`TerraformAsset ${id} expects path to be a directory, a file was passed: '${config.path}'`);
        }
        if (!stat.isFile() && this.type === AssetType.FILE) {
            throw new Error(`TerraformAsset ${id} expects path to be a file, a directory was passed: '${config.path}'`);
        }
    }
    /**
     * (experimental) The path relative to the root of the terraform directory in posix format Use this property to reference the asset.
     *
     * @experimental
     */
    get path() {
        return path.posix.join(ASSETS_DIRECTORY, this.stack.getLogicalId(constructs_1.Node.of(this)), // needed to get a human friendly, unique segment in the path
        this.type === AssetType.DIRECTORY ? "" : this.fileName);
    }
    /**
     * (experimental) Name of the asset.
     *
     * @experimental
     */
    get fileName() {
        switch (this.type) {
            case AssetType.ARCHIVE:
                return ARCHIVE_NAME;
            default:
                return path.basename(this.sourcePath);
        }
    }
    /**
     * (experimental) Allows this construct to emit artifacts into the cloud assembly during synthesis.
     *
     * This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
     * as they participate in synthesizing the cloud assembly.
     *
     * @experimental
     */
    onSynthesize(session) {
        const manifest = session.manifest;
        const stackManifest = manifest.forStack(this.stack);
        const targetPath = path.join(session.outdir, stackManifest.synthesizedStackPath, "..", this.path);
        if (this.type === AssetType.DIRECTORY) {
            fs.mkdirSync(targetPath, { recursive: true });
        }
        else {
            fs.mkdirSync(path.dirname(targetPath), { recursive: true });
        }
        switch (this.type) {
            case AssetType.FILE:
                fs.copyFileSync(this.sourcePath, targetPath);
                break;
            case AssetType.DIRECTORY:
                fs_1.copySync(this.sourcePath, targetPath);
                break;
            case AssetType.ARCHIVE:
                fs_1.archiveSync(this.sourcePath, targetPath);
                break;
            default:
                throw new Error(`Asset type ${this.type} is not implemented`);
        }
    }
}
exports.TerraformAsset = TerraformAsset;
_a = JSII_RTTI_SYMBOL_1;
TerraformAsset[_a] = { fqn: "cdktf.TerraformAsset", version: "0.4.1" };
//# sourceMappingURL=data:application/json;base64,