"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformRemoteState = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_element_1 = require("./terraform-element");
const tokens_1 = require("./tokens");
const util_1 = require("./util");
/**
 * @experimental
 */
class TerraformRemoteState extends terraform_element_1.TerraformElement {
    /**
     * @experimental
     */
    constructor(scope, id, backend, config) {
        super(scope, id);
        this.backend = backend;
        this.config = config;
    }
    /**
     * @experimental
     */
    getString(output) {
        return tokens_1.Token.asString(this.interpolationForAttribute(output));
    }
    /**
     * @experimental
     */
    getNumber(output) {
        return tokens_1.Token.asNumber(this.interpolationForAttribute(output));
    }
    /**
     * @experimental
     */
    getList(output) {
        return tokens_1.Token.asList(this.interpolationForAttribute(output));
    }
    /**
     * @experimental
     */
    getBoolean(output) {
        return tokens_1.Token.asString(this.interpolationForAttribute(output));
    }
    /**
     * @experimental
     */
    get(output) {
        return tokens_1.Token.asAny(this.interpolationForAttribute(output));
    }
    interpolationForAttribute(terraformAttribute) {
        return `\${data.terraform_remote_state.${this.friendlyUniqueId}.outputs.${terraformAttribute}}`;
    }
    extractConfig() {
        const configObj = util_1.keysToSnakeCase({ ...this.config });
        delete configObj.workspace;
        delete configObj.defaults;
        return configObj;
    }
    /**
     * (experimental) Adds this resource to the terraform JSON output.
     *
     * @experimental
     */
    toTerraform() {
        return {
            data: {
                // eslint-disable-next-line @typescript-eslint/camelcase
                terraform_remote_state: {
                    [this.friendlyUniqueId]: util_1.deepMerge({
                        backend: this.backend,
                        workspace: this.config.workspace,
                        defaults: this.config.defaults,
                        config: this.extractConfig()
                    }, this.rawOverrides)
                }
            }
        };
    }
}
exports.TerraformRemoteState = TerraformRemoteState;
_a = JSII_RTTI_SYMBOL_1;
TerraformRemoteState[_a] = { fqn: "cdktf.TerraformRemoteState", version: "0.4.1" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLXJlbW90ZS1zdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlcnJhZm9ybS1yZW1vdGUtc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSwyREFBdUQ7QUFDdkQscUNBQWlDO0FBQ2pDLGlDQUFvRDs7OztBQU9wRCxNQUFzQixvQkFBcUIsU0FBUSxvQ0FBZ0I7Ozs7SUFDL0QsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBbUIsT0FBZSxFQUFtQixNQUFzQztRQUMvSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRHNDLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFBbUIsV0FBTSxHQUFOLE1BQU0sQ0FBZ0M7SUFFbkksQ0FBQzs7OztJQUVNLFNBQVMsQ0FBQyxNQUFjO1FBQzNCLE9BQU8sY0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNsRSxDQUFDOzs7O0lBRU0sU0FBUyxDQUFDLE1BQWM7UUFDM0IsT0FBTyxjQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Ozs7SUFFTSxPQUFPLENBQUMsTUFBYztRQUN6QixPQUFPLGNBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQzs7OztJQUVNLFVBQVUsQ0FBQyxNQUFjO1FBQzVCLE9BQU8sY0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQW1CLENBQUE7SUFDbkYsQ0FBQzs7OztJQUVNLEdBQUcsQ0FBQyxNQUFjO1FBQ3JCLE9BQU8sY0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRU8seUJBQXlCLENBQUMsa0JBQTBCO1FBQ3hELE9BQU8sa0NBQWtDLElBQUksQ0FBQyxnQkFBZ0IsWUFBWSxrQkFBa0IsR0FBRyxDQUFBO0lBQ25HLENBQUM7SUFFTyxhQUFhO1FBQ2pCLE1BQU0sU0FBUyxHQUFHLHNCQUFlLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELE9BQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQztRQUMzQixPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDMUIsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQzs7Ozs7O0lBS00sV0FBVztRQUNkLE9BQU87WUFDSCxJQUFJLEVBQUU7Z0JBQ0Ysd0RBQXdEO2dCQUN4RCxzQkFBc0IsRUFBRTtvQkFDcEIsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxnQkFBUyxDQUFDO3dCQUMvQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87d0JBQ3JCLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVM7d0JBQ2hDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVE7d0JBQzlCLE1BQU0sRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFO3FCQUMvQixFQUNHLElBQUksQ0FBQyxZQUFZLENBQUM7aUJBQ3pCO2FBQ0o7U0FDSixDQUFDO0lBQ04sQ0FBQzs7QUF0REwsb0RBdURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IFRlcnJhZm9ybUVsZW1lbnQgfSBmcm9tIFwiLi90ZXJyYWZvcm0tZWxlbWVudFwiO1xuaW1wb3J0IHsgVG9rZW4gfSBmcm9tIFwiLi90b2tlbnNcIjtcbmltcG9ydCB7IGRlZXBNZXJnZSwga2V5c1RvU25ha2VDYXNlIH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFUZXJyYWZvcm1SZW1vdGVTdGF0ZUNvbmZpZyB7XG4gICAgcmVhZG9ubHkgd29ya3NwYWNlPzogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGRlZmF1bHRzPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRlcnJhZm9ybVJlbW90ZVN0YXRlIGV4dGVuZHMgVGVycmFmb3JtRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJpdmF0ZSByZWFkb25seSBiYWNrZW5kOiBzdHJpbmcsIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBEYXRhVGVycmFmb3JtUmVtb3RlU3RhdGVDb25maWcpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U3RyaW5nKG91dHB1dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFRva2VuLmFzU3RyaW5nKHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZShvdXRwdXQpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TnVtYmVyKG91dHB1dDogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIFRva2VuLmFzTnVtYmVyKHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZShvdXRwdXQpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TGlzdChvdXRwdXQ6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIFRva2VuLmFzTGlzdCh0aGlzLmludGVycG9sYXRpb25Gb3JBdHRyaWJ1dGUob3V0cHV0KSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEJvb2xlYW4ob3V0cHV0OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIFRva2VuLmFzU3RyaW5nKHRoaXMuaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZShvdXRwdXQpKSBhcyBhbnkgYXMgYm9vbGVhblxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQob3V0cHV0OiBzdHJpbmcpOiBhbnkge1xuICAgICAgICByZXR1cm4gVG9rZW4uYXNBbnkodGhpcy5pbnRlcnBvbGF0aW9uRm9yQXR0cmlidXRlKG91dHB1dCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW50ZXJwb2xhdGlvbkZvckF0dHJpYnV0ZSh0ZXJyYWZvcm1BdHRyaWJ1dGU6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIHJldHVybiBgXFwke2RhdGEudGVycmFmb3JtX3JlbW90ZV9zdGF0ZS4ke3RoaXMuZnJpZW5kbHlVbmlxdWVJZH0ub3V0cHV0cy4ke3RlcnJhZm9ybUF0dHJpYnV0ZX19YFxuICAgIH1cblxuICAgIHByaXZhdGUgZXh0cmFjdENvbmZpZygpOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZ09iaiA9IGtleXNUb1NuYWtlQ2FzZSh7IC4uLnRoaXMuY29uZmlnIH0pO1xuICAgICAgICBkZWxldGUgY29uZmlnT2JqLndvcmtzcGFjZTtcbiAgICAgICAgZGVsZXRlIGNvbmZpZ09iai5kZWZhdWx0cztcbiAgICAgICAgcmV0dXJuIGNvbmZpZ09iajtcbiAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgcHVibGljIHRvVGVycmFmb3JtKCk6IGFueSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9jYW1lbGNhc2VcbiAgICAgICAgICAgICAgICB0ZXJyYWZvcm1fcmVtb3RlX3N0YXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIFt0aGlzLmZyaWVuZGx5VW5pcXVlSWRdOiBkZWVwTWVyZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2VuZDogdGhpcy5iYWNrZW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya3NwYWNlOiB0aGlzLmNvbmZpZy53b3Jrc3BhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0czogdGhpcy5jb25maWcuZGVmYXVsdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IHRoaXMuZXh0cmFjdENvbmZpZygpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJhd092ZXJyaWRlcylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufSJdfQ==