"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Testing = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
const fs = require("fs");
const path = require("path");
const os = require("os");
const lib_1 = require("../lib");
const features_1 = require("./features");
/**
 * (experimental) Testing utilities for cdktf applications.
 *
 * @experimental
 */
class Testing {
    /* istanbul ignore next */
    constructor() {
        return;
    }
    /**
     * (experimental) Returns an app for testing with the following properties: - Output directory is a temp dir.
     *
     * @experimental
     */
    static app() {
        const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'cdktf.outdir.'));
        const app = new lib_1.App({ outdir, stackTraces: false });
        return this.stubVersion(this.enableFutureFlags(app));
    }
    /**
     * @experimental
     */
    static stubVersion(app) {
        constructs_1.Node.of(app).setContext('cdktfVersion', 'stubbed');
        return app;
    }
    /**
     * @experimental
     */
    static enableFutureFlags(app) {
        const node = constructs_1.Node.of(app);
        Object.entries(features_1.FUTURE_FLAGS).forEach(([key, value]) => node.setContext(key, value));
        return app;
    }
    /**
     * (experimental) Returns the Terraform synthesized JSON.
     *
     * @experimental
     */
    static synth(stack) {
        return JSON.stringify(stack.toTerraform(), null, 2);
    }
}
exports.Testing = Testing;
_a = JSII_RTTI_SYMBOL_1;
Testing[_a] = { fqn: "cdktf.Testing", version: "0.4.1" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3RpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSwyQ0FBaUM7QUFDakMseUJBQTBCO0FBQzFCLDZCQUE4QjtBQUM5Qix5QkFBMEI7QUFDMUIsZ0NBQTZCO0FBRTdCLHlDQUEwQzs7Ozs7O0FBSzFDLE1BQWEsT0FBTztJQTZCaEIsMEJBQTBCO0lBQzFCO1FBQ0ksT0FBTztJQUNYLENBQUM7Ozs7OztJQTNCTSxNQUFNLENBQUMsR0FBRztRQUNiLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUN2RSxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNwRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQzs7OztJQUVNLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBUTtRQUM5QixpQkFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLFNBQVMsQ0FBQyxDQUFBO1FBQ2xELE9BQU8sR0FBRyxDQUFBO0lBQ2QsQ0FBQzs7OztJQUVNLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFRO1FBQ3BDLE1BQU0sSUFBSSxHQUFHLGlCQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxPQUFPLENBQUMsdUJBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3BGLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7O0lBS00sTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFxQjtRQUNyQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUN2RCxDQUFDOztBQTNCTCwwQkFpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICdjb25zdHJ1Y3RzJ1xuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IG9zID0gcmVxdWlyZSgnb3MnKTtcbmltcG9ydCB7IEFwcCB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgeyBUZXJyYWZvcm1TdGFjayB9IGZyb20gJy4vdGVycmFmb3JtLXN0YWNrJztcbmltcG9ydCB7IEZVVFVSRV9GTEFHUyB9IGZyb20gJy4vZmVhdHVyZXMnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgY2xhc3MgVGVzdGluZyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgcHVibGljIHN0YXRpYyBhcHAoKTogQXBwIHtcbiAgICAgICAgY29uc3Qgb3V0ZGlyID0gZnMubWtkdGVtcFN5bmMocGF0aC5qb2luKG9zLnRtcGRpcigpLCAnY2RrdGYub3V0ZGlyLicpKTtcbiAgICAgICAgY29uc3QgYXBwID0gbmV3IEFwcCh7IG91dGRpciwgc3RhY2tUcmFjZXM6IGZhbHNlIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5zdHViVmVyc2lvbih0aGlzLmVuYWJsZUZ1dHVyZUZsYWdzKGFwcCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgc3R1YlZlcnNpb24oYXBwOiBBcHApOiBBcHAge1xuICAgICAgICBOb2RlLm9mKGFwcCkuc2V0Q29udGV4dCgnY2RrdGZWZXJzaW9uJywgJ3N0dWJiZWQnKVxuICAgICAgICByZXR1cm4gYXBwXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBlbmFibGVGdXR1cmVGbGFncyhhcHA6IEFwcCk6IEFwcCB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBOb2RlLm9mKGFwcCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKEZVVFVSRV9GTEFHUykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiBub2RlLnNldENvbnRleHQoa2V5LCB2YWx1ZSkpO1xuICAgICAgICByZXR1cm4gYXBwO1xuICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBwdWJsaWMgc3RhdGljIHN5bnRoKHN0YWNrOiBUZXJyYWZvcm1TdGFjaykge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RhY2sudG9UZXJyYWZvcm0oKSwgbnVsbCwgMilcbiAgICB9XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59Il19