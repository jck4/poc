"use strict";
// --------------------------------------------------------------------------------
// This file defines context keys that enable certain features that are
// implemented behind a flag in order to preserve backwards compatibility for
// existing apps. When a new app is initialized through `cdk init`, the CLI will
// automatically add enable these features by adding them to the generated
// `cdktf.json` file. In the next major release of the CDK for Terraform, these feature flags
// will be removed and will become the default behavior.
// --------------------------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.FUTURE_FLAGS = exports.ALLOW_SEP_CHARS_IN_LOGICAL_IDS = exports.EXCLUDE_STACK_ID_FROM_LOGICAL_IDS = void 0;
/**
 * When set, the stack id is excluded from generated logical ids for constructs within the stack.
 */
exports.EXCLUDE_STACK_ID_FROM_LOGICAL_IDS = 'excludeStackIdFromLogicalIds';
/**
 * When set, '_' and '-' are allowed in logical ids.
 */
exports.ALLOW_SEP_CHARS_IN_LOGICAL_IDS = 'allowSepCharsInLogicalIds';
/**
 * This map includes context keys and values for feature flags that enable
 * capabilities "from the future", which we could not introduce as the default
 * behavior due to backwards compatibility for existing projects.
 *
 * New projects generated through `cdktf init` will include these flags in their
 * generated `cdktf.json` file.
 *
 * When we release the next major version of the CDK for Terraform, we will flip the logic of
 * these features and clean up the `cdktf.json` generated by `cdktf init`.
 *
 * Tests must cover the default (disabled) case and the future (enabled) case.
 */
exports.FUTURE_FLAGS = {
    [exports.EXCLUDE_STACK_ID_FROM_LOGICAL_IDS]: 'true',
    [exports.ALLOW_SEP_CHARS_IN_LOGICAL_IDS]: 'true'
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmZWF0dXJlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsbUZBQW1GO0FBQ25GLHVFQUF1RTtBQUN2RSw2RUFBNkU7QUFDN0UsZ0ZBQWdGO0FBQ2hGLDBFQUEwRTtBQUMxRSw2RkFBNkY7QUFDN0Ysd0RBQXdEO0FBQ3hELG1GQUFtRjs7O0FBRW5GOztHQUVHO0FBQ1UsUUFBQSxpQ0FBaUMsR0FBRyw4QkFBOEIsQ0FBQztBQUVoRjs7R0FFRztBQUNVLFFBQUEsOEJBQThCLEdBQUcsMkJBQTJCLENBQUM7QUFFMUU7Ozs7Ozs7Ozs7OztHQVlHO0FBQ1UsUUFBQSxZQUFZLEdBQUc7SUFDMUIsQ0FBQyx5Q0FBaUMsQ0FBQyxFQUFFLE1BQU07SUFDM0MsQ0FBQyxzQ0FBOEIsQ0FBQyxFQUFFLE1BQU07Q0FDekMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUaGlzIGZpbGUgZGVmaW5lcyBjb250ZXh0IGtleXMgdGhhdCBlbmFibGUgY2VydGFpbiBmZWF0dXJlcyB0aGF0IGFyZVxuLy8gaW1wbGVtZW50ZWQgYmVoaW5kIGEgZmxhZyBpbiBvcmRlciB0byBwcmVzZXJ2ZSBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBmb3Jcbi8vIGV4aXN0aW5nIGFwcHMuIFdoZW4gYSBuZXcgYXBwIGlzIGluaXRpYWxpemVkIHRocm91Z2ggYGNkayBpbml0YCwgdGhlIENMSSB3aWxsXG4vLyBhdXRvbWF0aWNhbGx5IGFkZCBlbmFibGUgdGhlc2UgZmVhdHVyZXMgYnkgYWRkaW5nIHRoZW0gdG8gdGhlIGdlbmVyYXRlZFxuLy8gYGNka3RmLmpzb25gIGZpbGUuIEluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2Ugb2YgdGhlIENESyBmb3IgVGVycmFmb3JtLCB0aGVzZSBmZWF0dXJlIGZsYWdzXG4vLyB3aWxsIGJlIHJlbW92ZWQgYW5kIHdpbGwgYmVjb21lIHRoZSBkZWZhdWx0IGJlaGF2aW9yLlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBXaGVuIHNldCwgdGhlIHN0YWNrIGlkIGlzIGV4Y2x1ZGVkIGZyb20gZ2VuZXJhdGVkIGxvZ2ljYWwgaWRzIGZvciBjb25zdHJ1Y3RzIHdpdGhpbiB0aGUgc3RhY2suXG4gKi9cbmV4cG9ydCBjb25zdCBFWENMVURFX1NUQUNLX0lEX0ZST01fTE9HSUNBTF9JRFMgPSAnZXhjbHVkZVN0YWNrSWRGcm9tTG9naWNhbElkcyc7XG5cbi8qKlxuICogV2hlbiBzZXQsICdfJyBhbmQgJy0nIGFyZSBhbGxvd2VkIGluIGxvZ2ljYWwgaWRzLlxuICovXG5leHBvcnQgY29uc3QgQUxMT1dfU0VQX0NIQVJTX0lOX0xPR0lDQUxfSURTID0gJ2FsbG93U2VwQ2hhcnNJbkxvZ2ljYWxJZHMnO1xuXG4vKipcbiAqIFRoaXMgbWFwIGluY2x1ZGVzIGNvbnRleHQga2V5cyBhbmQgdmFsdWVzIGZvciBmZWF0dXJlIGZsYWdzIHRoYXQgZW5hYmxlXG4gKiBjYXBhYmlsaXRpZXMgXCJmcm9tIHRoZSBmdXR1cmVcIiwgd2hpY2ggd2UgY291bGQgbm90IGludHJvZHVjZSBhcyB0aGUgZGVmYXVsdFxuICogYmVoYXZpb3IgZHVlIHRvIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGZvciBleGlzdGluZyBwcm9qZWN0cy5cbiAqXG4gKiBOZXcgcHJvamVjdHMgZ2VuZXJhdGVkIHRocm91Z2ggYGNka3RmIGluaXRgIHdpbGwgaW5jbHVkZSB0aGVzZSBmbGFncyBpbiB0aGVpclxuICogZ2VuZXJhdGVkIGBjZGt0Zi5qc29uYCBmaWxlLlxuICpcbiAqIFdoZW4gd2UgcmVsZWFzZSB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIHRoZSBDREsgZm9yIFRlcnJhZm9ybSwgd2Ugd2lsbCBmbGlwIHRoZSBsb2dpYyBvZlxuICogdGhlc2UgZmVhdHVyZXMgYW5kIGNsZWFuIHVwIHRoZSBgY2RrdGYuanNvbmAgZ2VuZXJhdGVkIGJ5IGBjZGt0ZiBpbml0YC5cbiAqXG4gKiBUZXN0cyBtdXN0IGNvdmVyIHRoZSBkZWZhdWx0IChkaXNhYmxlZCkgY2FzZSBhbmQgdGhlIGZ1dHVyZSAoZW5hYmxlZCkgY2FzZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEZVVFVSRV9GTEFHUyA9IHtcbiAgW0VYQ0xVREVfU1RBQ0tfSURfRlJPTV9MT0dJQ0FMX0lEU106ICd0cnVlJyxcbiAgW0FMTE9XX1NFUF9DSEFSU19JTl9MT0dJQ0FMX0lEU106ICd0cnVlJ1xufTsiXX0=