"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = exports.CONTEXT_ENV = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
const fs = require("fs");
const package_json_1 = require("../package.json");
const manifest_1 = require("./manifest");
exports.CONTEXT_ENV = 'CDKTF_CONTEXT_JSON';
/**
 * (experimental) Represents a cdktf application.
 *
 * @experimental
 */
class App extends constructs_1.Construct {
    /**
     * (experimental) Defines an app.
     *
     * @param options configuration options.
     * @experimental
     */
    constructor(options = {}) {
        var _b, _c;
        super(undefined, '');
        this.outdir = (_c = (_b = process.env.CDKTF_OUTDIR) !== null && _b !== void 0 ? _b : options.outdir) !== null && _c !== void 0 ? _c : 'cdktf.out';
        this.targetStackId = process.env.CDKTF_TARGET_STACK_ID;
        this.loadContext(options.context);
        const node = constructs_1.Node.of(this);
        if (options.stackTraces === false) {
            node.setContext(constructs_1.ConstructMetadata.DISABLE_STACK_TRACE_IN_METADATA, true);
        }
        node.setContext('cdktfVersion', package_json_1.version);
    }
    /**
     * (experimental) Synthesizes all resources to the output directory.
     *
     * @experimental
     */
    synth() {
        if (!fs.existsSync(this.outdir)) {
            fs.mkdirSync(this.outdir);
        }
        const manifest = new manifest_1.Manifest(package_json_1.version, this.outdir);
        constructs_1.Node.of(this).synthesize({
            outdir: this.outdir,
            sessionContext: {
                manifest
            }
        });
        manifest.writeToFile();
    }
    loadContext(defaults = {}) {
        const node = constructs_1.Node.of(this);
        // prime with defaults passed through constructor
        for (const [k, v] of Object.entries(defaults)) {
            node.setContext(k, v);
        }
        // read from environment
        const contextJson = process.env[exports.CONTEXT_ENV];
        const contextFromEnvironment = contextJson
            ? JSON.parse(contextJson)
            : {};
        for (const [k, v] of Object.entries(contextFromEnvironment)) {
            node.setContext(k, v);
        }
    }
}
exports.App = App;
_a = JSII_RTTI_SYMBOL_1;
App[_a] = { fqn: "cdktf.App", version: "0.4.1" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkNBQWdFO0FBQ2hFLHlCQUF5QjtBQUN6QixrREFBMEM7QUFDMUMseUNBQXFDO0FBRXhCLFFBQUEsV0FBVyxHQUFHLG9CQUFvQixDQUFDOzs7Ozs7QUF5QmhELE1BQWEsR0FBSSxTQUFRLHNCQUFTOzs7Ozs7O0lBZTlCLFlBQVksVUFBc0IsRUFBRTs7UUFDaEMsS0FBSyxDQUFDLFNBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sZUFBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksbUNBQUksT0FBTyxDQUFDLE1BQU0sbUNBQUksV0FBVyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQTtRQUV0RCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVsQyxNQUFNLElBQUksR0FBRyxpQkFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMxQixJQUFJLE9BQU8sQ0FBQyxXQUFXLEtBQUssS0FBSyxFQUFFO1lBQy9CLElBQUksQ0FBQyxVQUFVLENBQUMsOEJBQWlCLENBQUMsK0JBQStCLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDNUU7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxzQkFBTyxDQUFDLENBQUE7SUFDNUMsQ0FBQzs7Ozs7O0lBS00sS0FBSztRQUNWLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMvQixFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMzQjtRQUVELE1BQU0sUUFBUSxHQUFHLElBQUksbUJBQVEsQ0FBQyxzQkFBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUVuRCxpQkFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUM7WUFDdkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLGNBQWMsRUFBRTtnQkFDZCxRQUFRO2FBQ1Q7U0FDRixDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVPLFdBQVcsQ0FBQyxXQUFzQyxFQUFHO1FBQ3pELE1BQU0sSUFBSSxHQUFHLGlCQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRTFCLGlEQUFpRDtRQUNqRCxLQUFLLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUN2QjtRQUVELHdCQUF3QjtRQUN4QixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFXLENBQUMsQ0FBQztRQUM3QyxNQUFNLHNCQUFzQixHQUFHLFdBQVc7WUFDeEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxFQUFHLENBQUM7UUFFUixLQUFLLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFO1lBQzNELElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQzs7QUFuRVAsa0JBb0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0LCBOb2RlLCBDb25zdHJ1Y3RNZXRhZGF0YSB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4uL3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBNYW5pZmVzdCB9IGZyb20gJy4vbWFuaWZlc3QnXG5cbmV4cG9ydCBjb25zdCBDT05URVhUX0VOViA9ICdDREtURl9DT05URVhUX0pTT04nO1xuZXhwb3J0IGludGVyZmFjZSBBcHBPcHRpb25zIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICByZWFkb25seSBvdXRkaXI/OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgc3RhY2tUcmFjZXM/OiBib29sZWFuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgcmVhZG9ubHkgY29udGV4dD86IHsgW2tleTogc3RyaW5nXTogYW55IH07XG59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGNsYXNzIEFwcCBleHRlbmRzIENvbnN0cnVjdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgcHVibGljIHJlYWRvbmx5IG91dGRpcjogc3RyaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgcHVibGljIHJlYWRvbmx5IHRhcmdldFN0YWNrSWQ6IHN0cmluZyB8IHVuZGVmaW5lZFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBBcHBPcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIodW5kZWZpbmVkIGFzIGFueSwgJycpO1xuICAgICAgICB0aGlzLm91dGRpciA9IHByb2Nlc3MuZW52LkNES1RGX09VVERJUiA/PyBvcHRpb25zLm91dGRpciA/PyAnY2RrdGYub3V0JztcbiAgICAgICAgdGhpcy50YXJnZXRTdGFja0lkID0gcHJvY2Vzcy5lbnYuQ0RLVEZfVEFSR0VUX1NUQUNLX0lEXG5cbiAgICAgICAgdGhpcy5sb2FkQ29udGV4dChvcHRpb25zLmNvbnRleHQpO1xuXG4gICAgICAgIGNvbnN0IG5vZGUgPSBOb2RlLm9mKHRoaXMpXG4gICAgICAgIGlmIChvcHRpb25zLnN0YWNrVHJhY2VzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbm9kZS5zZXRDb250ZXh0KENvbnN0cnVjdE1ldGFkYXRhLkRJU0FCTEVfU1RBQ0tfVFJBQ0VfSU5fTUVUQURBVEEsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZS5zZXRDb250ZXh0KCdjZGt0ZlZlcnNpb24nLCB2ZXJzaW9uKVxuICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgcHVibGljIHN5bnRoKCk6IHZvaWQge1xuICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKHRoaXMub3V0ZGlyKSkge1xuICAgICAgICBmcy5ta2RpclN5bmModGhpcy5vdXRkaXIpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtYW5pZmVzdCA9IG5ldyBNYW5pZmVzdCh2ZXJzaW9uLCB0aGlzLm91dGRpcilcblxuICAgICAgTm9kZS5vZih0aGlzKS5zeW50aGVzaXplKHtcbiAgICAgICAgb3V0ZGlyOiB0aGlzLm91dGRpcixcbiAgICAgICAgc2Vzc2lvbkNvbnRleHQ6IHtcbiAgICAgICAgICBtYW5pZmVzdFxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgbWFuaWZlc3Qud3JpdGVUb0ZpbGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRDb250ZXh0KGRlZmF1bHRzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0geyB9KSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBOb2RlLm9mKHRoaXMpXG5cbiAgICAgICAgLy8gcHJpbWUgd2l0aCBkZWZhdWx0cyBwYXNzZWQgdGhyb3VnaCBjb25zdHJ1Y3RvclxuICAgICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhkZWZhdWx0cykpIHtcbiAgICAgICAgICBub2RlLnNldENvbnRleHQoaywgdik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZWFkIGZyb20gZW52aXJvbm1lbnRcbiAgICAgICAgY29uc3QgY29udGV4dEpzb24gPSBwcm9jZXNzLmVudltDT05URVhUX0VOVl07XG4gICAgICAgIGNvbnN0IGNvbnRleHRGcm9tRW52aXJvbm1lbnQgPSBjb250ZXh0SnNvblxuICAgICAgICAgID8gSlNPTi5wYXJzZShjb250ZXh0SnNvbilcbiAgICAgICAgICA6IHsgfTtcblxuICAgICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhjb250ZXh0RnJvbUVudmlyb25tZW50KSkge1xuICAgICAgICAgIG5vZGUuc2V0Q29udGV4dChrLCB2KTtcbiAgICAgICAgfVxuICAgICAgfVxufSJdfQ==