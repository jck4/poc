import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * @stability stable
 */
export interface NetworkConfig extends cdktf.TerraformMetaArguments {
    /**
     * Enable manual container attachment to the network.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#attachable Network#attachable}
     *
     * @stability stable
     */
    readonly attachable?: boolean;
    /**
     * Requests daemon to check for networks with same name.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#check_duplicate Network#check_duplicate}
     *
     * @stability stable
     */
    readonly checkDuplicate?: boolean;
    /**
     * The driver of the Docker network. Possible values are `bridge`, `host`, `overlay`, `macvlan`. See [network docs](https://docs.docker.com/network/#network-drivers) for more details.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#driver Network#driver}
     *
     * @stability stable
     */
    readonly driver?: string;
    /**
     * Create swarm routing-mesh network. Defaults to `false`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#ingress Network#ingress}
     *
     * @stability stable
     */
    readonly ingress?: boolean;
    /**
     * Whether the network is internal.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#internal Network#internal}
     *
     * @stability stable
     */
    readonly internal?: boolean;
    /**
     * Driver used by the custom IP scheme of the network. Defaults to `default`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#ipam_driver Network#ipam_driver}
     *
     * @stability stable
     */
    readonly ipamDriver?: string;
    /**
     * Enable IPv6 networking. Defaults to `false`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#ipv6 Network#ipv6}
     *
     * @stability stable
     */
    readonly ipv6?: boolean;
    /**
     * The name of the Docker network.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#name Network#name}
     *
     * @stability stable
     */
    readonly name: string;
    /**
     * Only available with bridge networks. See [bridge options docs](https://docs.docker.com/engine/reference/commandline/network_create/#bridge-driver-options) for more details.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#options Network#options}
     *
     * @stability stable
     */
    readonly options?: {
        [key: string]: string;
    };
    /**
     * ipam_config block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#ipam_config Network#ipam_config}
     *
     * @stability stable
     */
    readonly ipamConfig?: NetworkIpamConfig[];
    /**
     * labels block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#labels Network#labels}
     *
     * @stability stable
     */
    readonly labels?: NetworkLabels[];
}
/**
 * @stability stable
 */
export interface NetworkIpamConfig {
    /**
     * Auxiliary IPv4 or IPv6 addresses used by Network driver.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#aux_address Network#aux_address}
     *
     * @stability stable
     */
    readonly auxAddress?: {
        [key: string]: string;
    };
    /**
     * The IP address of the gateway.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#gateway Network#gateway}
     *
     * @stability stable
     */
    readonly gateway?: string;
    /**
     * The ip range in CIDR form.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#ip_range Network#ip_range}
     *
     * @stability stable
     */
    readonly ipRange?: string;
    /**
     * The subnet in CIDR form.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#subnet Network#subnet}
     *
     * @stability stable
     */
    readonly subnet?: string;
}
/**
 * @stability stable
 */
export interface NetworkLabels {
    /**
     * Name of the label.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#label Network#label}
     *
     * @stability stable
     */
    readonly label: string;
    /**
     * Value of the label.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/network.html#value Network#value}
     *
     * @stability stable
     */
    readonly value: string;
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/docker/r/network.html docker_network}.
 *
 * @stability stable
 */
export declare class Network extends cdktf.TerraformResource {
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/docker/r/network.html docker_network} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config: NetworkConfig);
    private _attachable?;
    /**
     * @stability stable
     */
    get attachable(): boolean;
    /**
     * @stability stable
     */
    set attachable(value: boolean);
    /**
     * @stability stable
     */
    resetAttachable(): void;
    /**
     * @stability stable
     */
    get attachableInput(): boolean | undefined;
    private _checkDuplicate?;
    /**
     * @stability stable
     */
    get checkDuplicate(): boolean;
    /**
     * @stability stable
     */
    set checkDuplicate(value: boolean);
    /**
     * @stability stable
     */
    resetCheckDuplicate(): void;
    /**
     * @stability stable
     */
    get checkDuplicateInput(): boolean | undefined;
    private _driver?;
    /**
     * @stability stable
     */
    get driver(): string;
    /**
     * @stability stable
     */
    set driver(value: string);
    /**
     * @stability stable
     */
    resetDriver(): void;
    /**
     * @stability stable
     */
    get driverInput(): string | undefined;
    /**
     * @stability stable
     */
    get id(): string;
    private _ingress?;
    /**
     * @stability stable
     */
    get ingress(): boolean;
    /**
     * @stability stable
     */
    set ingress(value: boolean);
    /**
     * @stability stable
     */
    resetIngress(): void;
    /**
     * @stability stable
     */
    get ingressInput(): boolean | undefined;
    private _internal?;
    /**
     * @stability stable
     */
    get internal(): boolean;
    /**
     * @stability stable
     */
    set internal(value: boolean);
    /**
     * @stability stable
     */
    resetInternal(): void;
    /**
     * @stability stable
     */
    get internalInput(): boolean | undefined;
    private _ipamDriver?;
    /**
     * @stability stable
     */
    get ipamDriver(): string;
    /**
     * @stability stable
     */
    set ipamDriver(value: string);
    /**
     * @stability stable
     */
    resetIpamDriver(): void;
    /**
     * @stability stable
     */
    get ipamDriverInput(): string | undefined;
    private _ipv6?;
    /**
     * @stability stable
     */
    get ipv6(): boolean;
    /**
     * @stability stable
     */
    set ipv6(value: boolean);
    /**
     * @stability stable
     */
    resetIpv6(): void;
    /**
     * @stability stable
     */
    get ipv6Input(): boolean | undefined;
    private _name;
    /**
     * @stability stable
     */
    get name(): string;
    /**
     * @stability stable
     */
    set name(value: string);
    /**
     * @stability stable
     */
    get nameInput(): string;
    private _options?;
    /**
     * @stability stable
     */
    get options(): {
        [key: string]: string;
    };
    /**
     * @stability stable
     */
    set options(value: {
        [key: string]: string;
    });
    /**
     * @stability stable
     */
    resetOptions(): void;
    /**
     * @stability stable
     */
    get optionsInput(): {
        [key: string]: string;
    } | undefined;
    /**
     * @stability stable
     */
    get scope(): string;
    private _ipamConfig?;
    /**
     * @stability stable
     */
    get ipamConfig(): NetworkIpamConfig[];
    /**
     * @stability stable
     */
    set ipamConfig(value: NetworkIpamConfig[]);
    /**
     * @stability stable
     */
    resetIpamConfig(): void;
    /**
     * @stability stable
     */
    get ipamConfigInput(): NetworkIpamConfig[] | undefined;
    private _labels?;
    /**
     * @stability stable
     */
    get labels(): NetworkLabels[];
    /**
     * @stability stable
     */
    set labels(value: NetworkLabels[]);
    /**
     * @stability stable
     */
    resetLabels(): void;
    /**
     * @stability stable
     */
    get labelsInput(): NetworkLabels[] | undefined;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
