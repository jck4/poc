"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = exports.ContainerNetworkData = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
 * @stability stable
 */
class ContainerNetworkData extends cdktf.ComplexComputedList {
    // gateway - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get gateway() {
        return this.getStringAttribute('gateway');
    }
    // global_ipv6_address - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get globalIpv6Address() {
        return this.getStringAttribute('global_ipv6_address');
    }
    // global_ipv6_prefix_length - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get globalIpv6PrefixLength() {
        return this.getNumberAttribute('global_ipv6_prefix_length');
    }
    // ip_address - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get ipAddress() {
        return this.getStringAttribute('ip_address');
    }
    // ip_prefix_length - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get ipPrefixLength() {
        return this.getNumberAttribute('ip_prefix_length');
    }
    // ipv6_gateway - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get ipv6Gateway() {
        return this.getStringAttribute('ipv6_gateway');
    }
    // network_name - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get networkName() {
        return this.getStringAttribute('network_name');
    }
}
exports.ContainerNetworkData = ContainerNetworkData;
_a = JSII_RTTI_SYMBOL_1;
ContainerNetworkData[_a] = { fqn: "@cdktf/provider-docker.ContainerNetworkData", version: "0.2.31" };
function containerCapabilitiesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        add: cdktf.listMapper(cdktf.stringToTerraform)(struct.add),
        drop: cdktf.listMapper(cdktf.stringToTerraform)(struct.drop),
    };
}
function containerDevicesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_path: cdktf.stringToTerraform(struct.containerPath),
        host_path: cdktf.stringToTerraform(struct.hostPath),
        permissions: cdktf.stringToTerraform(struct.permissions),
    };
}
function containerHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval: cdktf.stringToTerraform(struct.interval),
        retries: cdktf.numberToTerraform(struct.retries),
        start_period: cdktf.stringToTerraform(struct.startPeriod),
        test: cdktf.listMapper(cdktf.stringToTerraform)(struct.test),
        timeout: cdktf.stringToTerraform(struct.timeout),
    };
}
function containerHostToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        host: cdktf.stringToTerraform(struct.host),
        ip: cdktf.stringToTerraform(struct.ip),
    };
}
function containerLabelsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        label: cdktf.stringToTerraform(struct.label),
        value: cdktf.stringToTerraform(struct.value),
    };
}
function containerMountsBindOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        propagation: cdktf.stringToTerraform(struct.propagation),
    };
}
function containerMountsTmpfsOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        mode: cdktf.numberToTerraform(struct.mode),
        size_bytes: cdktf.numberToTerraform(struct.sizeBytes),
    };
}
function containerMountsVolumeOptionsLabelsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        label: cdktf.stringToTerraform(struct.label),
        value: cdktf.stringToTerraform(struct.value),
    };
}
function containerMountsVolumeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        driver_name: cdktf.stringToTerraform(struct.driverName),
        driver_options: cdktf.hashMapper(cdktf.anyToTerraform)(struct.driverOptions),
        no_copy: cdktf.booleanToTerraform(struct.noCopy),
        labels: cdktf.listMapper(containerMountsVolumeOptionsLabelsToTerraform)(struct.labels),
    };
}
function containerMountsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        read_only: cdktf.booleanToTerraform(struct.readOnly),
        source: cdktf.stringToTerraform(struct.source),
        target: cdktf.stringToTerraform(struct.target),
        type: cdktf.stringToTerraform(struct.type),
        bind_options: cdktf.listMapper(containerMountsBindOptionsToTerraform)(struct.bindOptions),
        tmpfs_options: cdktf.listMapper(containerMountsTmpfsOptionsToTerraform)(struct.tmpfsOptions),
        volume_options: cdktf.listMapper(containerMountsVolumeOptionsToTerraform)(struct.volumeOptions),
    };
}
function containerNetworksAdvancedToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        aliases: cdktf.listMapper(cdktf.stringToTerraform)(struct.aliases),
        ipv4_address: cdktf.stringToTerraform(struct.ipv4Address),
        ipv6_address: cdktf.stringToTerraform(struct.ipv6Address),
        name: cdktf.stringToTerraform(struct.name),
    };
}
function containerPortsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        external: cdktf.numberToTerraform(struct.external),
        internal: cdktf.numberToTerraform(struct.internal),
        ip: cdktf.stringToTerraform(struct.ip),
        protocol: cdktf.stringToTerraform(struct.protocol),
    };
}
function containerUlimitToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        hard: cdktf.numberToTerraform(struct.hard),
        name: cdktf.stringToTerraform(struct.name),
        soft: cdktf.numberToTerraform(struct.soft),
    };
}
function containerUploadToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        content: cdktf.stringToTerraform(struct.content),
        content_base64: cdktf.stringToTerraform(struct.contentBase64),
        executable: cdktf.booleanToTerraform(struct.executable),
        file: cdktf.stringToTerraform(struct.file),
        source: cdktf.stringToTerraform(struct.source),
        source_hash: cdktf.stringToTerraform(struct.sourceHash),
    };
}
function containerVolumesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        container_path: cdktf.stringToTerraform(struct.containerPath),
        from_container: cdktf.stringToTerraform(struct.fromContainer),
        host_path: cdktf.stringToTerraform(struct.hostPath),
        read_only: cdktf.booleanToTerraform(struct.readOnly),
        volume_name: cdktf.stringToTerraform(struct.volumeName),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/docker/r/container.html docker_container}.
 *
 * @stability stable
 */
class Container extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/docker/r/container.html docker_container} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'docker_container',
            terraformGeneratorMetadata: {
                providerName: 'docker'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._attach = config.attach;
        this._command = config.command;
        this._cpuSet = config.cpuSet;
        this._cpuShares = config.cpuShares;
        this._destroyGraceSeconds = config.destroyGraceSeconds;
        this._dns = config.dns;
        this._dnsOpts = config.dnsOpts;
        this._dnsSearch = config.dnsSearch;
        this._domainname = config.domainname;
        this._entrypoint = config.entrypoint;
        this._env = config.env;
        this._groupAdd = config.groupAdd;
        this._hostname = config.hostname;
        this._image = config.image;
        this._init = config.init;
        this._ipcMode = config.ipcMode;
        this._links = config.links;
        this._logDriver = config.logDriver;
        this._logOpts = config.logOpts;
        this._logs = config.logs;
        this._maxRetryCount = config.maxRetryCount;
        this._memory = config.memory;
        this._memorySwap = config.memorySwap;
        this._mustRun = config.mustRun;
        this._name = config.name;
        this._networkAlias = config.networkAlias;
        this._networkMode = config.networkMode;
        this._networks = config.networks;
        this._pidMode = config.pidMode;
        this._privileged = config.privileged;
        this._publishAllPorts = config.publishAllPorts;
        this._readOnly = config.readOnly;
        this._removeVolumes = config.removeVolumes;
        this._restart = config.restart;
        this._rm = config.rm;
        this._securityOpts = config.securityOpts;
        this._shmSize = config.shmSize;
        this._start = config.start;
        this._stdinOpen = config.stdinOpen;
        this._sysctls = config.sysctls;
        this._tmpfs = config.tmpfs;
        this._tty = config.tty;
        this._user = config.user;
        this._usernsMode = config.usernsMode;
        this._workingDir = config.workingDir;
        this._capabilities = config.capabilities;
        this._devices = config.devices;
        this._healthcheck = config.healthcheck;
        this._host = config.host;
        this._labels = config.labels;
        this._mounts = config.mounts;
        this._networksAdvanced = config.networksAdvanced;
        this._ports = config.ports;
        this._ulimit = config.ulimit;
        this._upload = config.upload;
        this._volumes = config.volumes;
    }
    /**
     * @stability stable
     */
    get attach() {
        return this.getBooleanAttribute('attach');
    }
    /**
     * @stability stable
     */
    set attach(value) {
        this._attach = value;
    }
    /**
     * @stability stable
     */
    resetAttach() {
        this._attach = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get attachInput() {
        return this._attach;
    }
    // bridge - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get bridge() {
        return this.getStringAttribute('bridge');
    }
    /**
     * @stability stable
     */
    get command() {
        return this.getListAttribute('command');
    }
    /**
     * @stability stable
     */
    set command(value) {
        this._command = value;
    }
    /**
     * @stability stable
     */
    resetCommand() {
        this._command = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get commandInput() {
        return this._command;
    }
    // container_logs - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get containerLogs() {
        return this.getStringAttribute('container_logs');
    }
    /**
     * @stability stable
     */
    get cpuSet() {
        return this.getStringAttribute('cpu_set');
    }
    /**
     * @stability stable
     */
    set cpuSet(value) {
        this._cpuSet = value;
    }
    /**
     * @stability stable
     */
    resetCpuSet() {
        this._cpuSet = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get cpuSetInput() {
        return this._cpuSet;
    }
    /**
     * @stability stable
     */
    get cpuShares() {
        return this.getNumberAttribute('cpu_shares');
    }
    /**
     * @stability stable
     */
    set cpuShares(value) {
        this._cpuShares = value;
    }
    /**
     * @stability stable
     */
    resetCpuShares() {
        this._cpuShares = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get cpuSharesInput() {
        return this._cpuShares;
    }
    /**
     * @stability stable
     */
    get destroyGraceSeconds() {
        return this.getNumberAttribute('destroy_grace_seconds');
    }
    /**
     * @stability stable
     */
    set destroyGraceSeconds(value) {
        this._destroyGraceSeconds = value;
    }
    /**
     * @stability stable
     */
    resetDestroyGraceSeconds() {
        this._destroyGraceSeconds = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get destroyGraceSecondsInput() {
        return this._destroyGraceSeconds;
    }
    /**
     * @stability stable
     */
    get dns() {
        return this.getListAttribute('dns');
    }
    /**
     * @stability stable
     */
    set dns(value) {
        this._dns = value;
    }
    /**
     * @stability stable
     */
    resetDns() {
        this._dns = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get dnsInput() {
        return this._dns;
    }
    /**
     * @stability stable
     */
    get dnsOpts() {
        return this.getListAttribute('dns_opts');
    }
    /**
     * @stability stable
     */
    set dnsOpts(value) {
        this._dnsOpts = value;
    }
    /**
     * @stability stable
     */
    resetDnsOpts() {
        this._dnsOpts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get dnsOptsInput() {
        return this._dnsOpts;
    }
    /**
     * @stability stable
     */
    get dnsSearch() {
        return this.getListAttribute('dns_search');
    }
    /**
     * @stability stable
     */
    set dnsSearch(value) {
        this._dnsSearch = value;
    }
    /**
     * @stability stable
     */
    resetDnsSearch() {
        this._dnsSearch = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get dnsSearchInput() {
        return this._dnsSearch;
    }
    /**
     * @stability stable
     */
    get domainname() {
        return this.getStringAttribute('domainname');
    }
    /**
     * @stability stable
     */
    set domainname(value) {
        this._domainname = value;
    }
    /**
     * @stability stable
     */
    resetDomainname() {
        this._domainname = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get domainnameInput() {
        return this._domainname;
    }
    /**
     * @stability stable
     */
    get entrypoint() {
        return this.getListAttribute('entrypoint');
    }
    /**
     * @stability stable
     */
    set entrypoint(value) {
        this._entrypoint = value;
    }
    /**
     * @stability stable
     */
    resetEntrypoint() {
        this._entrypoint = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get entrypointInput() {
        return this._entrypoint;
    }
    /**
     * @stability stable
     */
    get env() {
        return this.getListAttribute('env');
    }
    /**
     * @stability stable
     */
    set env(value) {
        this._env = value;
    }
    /**
     * @stability stable
     */
    resetEnv() {
        this._env = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get envInput() {
        return this._env;
    }
    // exit_code - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get exitCode() {
        return this.getNumberAttribute('exit_code');
    }
    // gateway - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get gateway() {
        return this.getStringAttribute('gateway');
    }
    /**
     * @stability stable
     */
    get groupAdd() {
        return this.getListAttribute('group_add');
    }
    /**
     * @stability stable
     */
    set groupAdd(value) {
        this._groupAdd = value;
    }
    /**
     * @stability stable
     */
    resetGroupAdd() {
        this._groupAdd = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get groupAddInput() {
        return this._groupAdd;
    }
    /**
     * @stability stable
     */
    get hostname() {
        return this.getStringAttribute('hostname');
    }
    /**
     * @stability stable
     */
    set hostname(value) {
        this._hostname = value;
    }
    /**
     * @stability stable
     */
    resetHostname() {
        this._hostname = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get hostnameInput() {
        return this._hostname;
    }
    // id - computed: true, optional: true, required: false
    /**
     * @stability stable
     */
    get id() {
        return this.getStringAttribute('id');
    }
    /**
     * @stability stable
     */
    get image() {
        return this.getStringAttribute('image');
    }
    /**
     * @stability stable
     */
    set image(value) {
        this._image = value;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get imageInput() {
        return this._image;
    }
    /**
     * @stability stable
     */
    get init() {
        return this.getBooleanAttribute('init');
    }
    /**
     * @stability stable
     */
    set init(value) {
        this._init = value;
    }
    /**
     * @stability stable
     */
    resetInit() {
        this._init = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get initInput() {
        return this._init;
    }
    // ip_address - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get ipAddress() {
        return this.getStringAttribute('ip_address');
    }
    // ip_prefix_length - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get ipPrefixLength() {
        return this.getNumberAttribute('ip_prefix_length');
    }
    /**
     * @stability stable
     */
    get ipcMode() {
        return this.getStringAttribute('ipc_mode');
    }
    /**
     * @stability stable
     */
    set ipcMode(value) {
        this._ipcMode = value;
    }
    /**
     * @stability stable
     */
    resetIpcMode() {
        this._ipcMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get ipcModeInput() {
        return this._ipcMode;
    }
    /**
     * @stability stable
     */
    get links() {
        return this.getListAttribute('links');
    }
    /**
     * @stability stable
     */
    set links(value) {
        this._links = value;
    }
    /**
     * @stability stable
     */
    resetLinks() {
        this._links = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get linksInput() {
        return this._links;
    }
    /**
     * @stability stable
     */
    get logDriver() {
        return this.getStringAttribute('log_driver');
    }
    /**
     * @stability stable
     */
    set logDriver(value) {
        this._logDriver = value;
    }
    /**
     * @stability stable
     */
    resetLogDriver() {
        this._logDriver = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get logDriverInput() {
        return this._logDriver;
    }
    /**
     * @stability stable
     */
    get logOpts() {
        return this.interpolationForAttribute('log_opts');
    }
    /**
     * @stability stable
     */
    set logOpts(value) {
        this._logOpts = value;
    }
    /**
     * @stability stable
     */
    resetLogOpts() {
        this._logOpts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get logOptsInput() {
        return this._logOpts;
    }
    /**
     * @stability stable
     */
    get logs() {
        return this.getBooleanAttribute('logs');
    }
    /**
     * @stability stable
     */
    set logs(value) {
        this._logs = value;
    }
    /**
     * @stability stable
     */
    resetLogs() {
        this._logs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get logsInput() {
        return this._logs;
    }
    /**
     * @stability stable
     */
    get maxRetryCount() {
        return this.getNumberAttribute('max_retry_count');
    }
    /**
     * @stability stable
     */
    set maxRetryCount(value) {
        this._maxRetryCount = value;
    }
    /**
     * @stability stable
     */
    resetMaxRetryCount() {
        this._maxRetryCount = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get maxRetryCountInput() {
        return this._maxRetryCount;
    }
    /**
     * @stability stable
     */
    get memory() {
        return this.getNumberAttribute('memory');
    }
    /**
     * @stability stable
     */
    set memory(value) {
        this._memory = value;
    }
    /**
     * @stability stable
     */
    resetMemory() {
        this._memory = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get memoryInput() {
        return this._memory;
    }
    /**
     * @stability stable
     */
    get memorySwap() {
        return this.getNumberAttribute('memory_swap');
    }
    /**
     * @stability stable
     */
    set memorySwap(value) {
        this._memorySwap = value;
    }
    /**
     * @stability stable
     */
    resetMemorySwap() {
        this._memorySwap = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get memorySwapInput() {
        return this._memorySwap;
    }
    /**
     * @stability stable
     */
    get mustRun() {
        return this.getBooleanAttribute('must_run');
    }
    /**
     * @stability stable
     */
    set mustRun(value) {
        this._mustRun = value;
    }
    /**
     * @stability stable
     */
    resetMustRun() {
        this._mustRun = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get mustRunInput() {
        return this._mustRun;
    }
    /**
     * @stability stable
     */
    get name() {
        return this.getStringAttribute('name');
    }
    /**
     * @stability stable
     */
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get nameInput() {
        return this._name;
    }
    /**
     * @stability stable
     */
    get networkAlias() {
        return this.getListAttribute('network_alias');
    }
    /**
     * @stability stable
     */
    set networkAlias(value) {
        this._networkAlias = value;
    }
    /**
     * @stability stable
     */
    resetNetworkAlias() {
        this._networkAlias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get networkAliasInput() {
        return this._networkAlias;
    }
    // network_data - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    networkData(index) {
        return new ContainerNetworkData(this, 'network_data', index);
    }
    /**
     * @stability stable
     */
    get networkMode() {
        return this.getStringAttribute('network_mode');
    }
    /**
     * @stability stable
     */
    set networkMode(value) {
        this._networkMode = value;
    }
    /**
     * @stability stable
     */
    resetNetworkMode() {
        this._networkMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get networkModeInput() {
        return this._networkMode;
    }
    /**
     * @stability stable
     */
    get networks() {
        return this.getListAttribute('networks');
    }
    /**
     * @stability stable
     */
    set networks(value) {
        this._networks = value;
    }
    /**
     * @stability stable
     */
    resetNetworks() {
        this._networks = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get networksInput() {
        return this._networks;
    }
    /**
     * @stability stable
     */
    get pidMode() {
        return this.getStringAttribute('pid_mode');
    }
    /**
     * @stability stable
     */
    set pidMode(value) {
        this._pidMode = value;
    }
    /**
     * @stability stable
     */
    resetPidMode() {
        this._pidMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get pidModeInput() {
        return this._pidMode;
    }
    /**
     * @stability stable
     */
    get privileged() {
        return this.getBooleanAttribute('privileged');
    }
    /**
     * @stability stable
     */
    set privileged(value) {
        this._privileged = value;
    }
    /**
     * @stability stable
     */
    resetPrivileged() {
        this._privileged = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get privilegedInput() {
        return this._privileged;
    }
    /**
     * @stability stable
     */
    get publishAllPorts() {
        return this.getBooleanAttribute('publish_all_ports');
    }
    /**
     * @stability stable
     */
    set publishAllPorts(value) {
        this._publishAllPorts = value;
    }
    /**
     * @stability stable
     */
    resetPublishAllPorts() {
        this._publishAllPorts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get publishAllPortsInput() {
        return this._publishAllPorts;
    }
    /**
     * @stability stable
     */
    get readOnly() {
        return this.getBooleanAttribute('read_only');
    }
    /**
     * @stability stable
     */
    set readOnly(value) {
        this._readOnly = value;
    }
    /**
     * @stability stable
     */
    resetReadOnly() {
        this._readOnly = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get readOnlyInput() {
        return this._readOnly;
    }
    /**
     * @stability stable
     */
    get removeVolumes() {
        return this.getBooleanAttribute('remove_volumes');
    }
    /**
     * @stability stable
     */
    set removeVolumes(value) {
        this._removeVolumes = value;
    }
    /**
     * @stability stable
     */
    resetRemoveVolumes() {
        this._removeVolumes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get removeVolumesInput() {
        return this._removeVolumes;
    }
    /**
     * @stability stable
     */
    get restart() {
        return this.getStringAttribute('restart');
    }
    /**
     * @stability stable
     */
    set restart(value) {
        this._restart = value;
    }
    /**
     * @stability stable
     */
    resetRestart() {
        this._restart = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get restartInput() {
        return this._restart;
    }
    /**
     * @stability stable
     */
    get rm() {
        return this.getBooleanAttribute('rm');
    }
    /**
     * @stability stable
     */
    set rm(value) {
        this._rm = value;
    }
    /**
     * @stability stable
     */
    resetRm() {
        this._rm = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get rmInput() {
        return this._rm;
    }
    /**
     * @stability stable
     */
    get securityOpts() {
        return this.getListAttribute('security_opts');
    }
    /**
     * @stability stable
     */
    set securityOpts(value) {
        this._securityOpts = value;
    }
    /**
     * @stability stable
     */
    resetSecurityOpts() {
        this._securityOpts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get securityOptsInput() {
        return this._securityOpts;
    }
    /**
     * @stability stable
     */
    get shmSize() {
        return this.getNumberAttribute('shm_size');
    }
    /**
     * @stability stable
     */
    set shmSize(value) {
        this._shmSize = value;
    }
    /**
     * @stability stable
     */
    resetShmSize() {
        this._shmSize = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get shmSizeInput() {
        return this._shmSize;
    }
    /**
     * @stability stable
     */
    get start() {
        return this.getBooleanAttribute('start');
    }
    /**
     * @stability stable
     */
    set start(value) {
        this._start = value;
    }
    /**
     * @stability stable
     */
    resetStart() {
        this._start = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get startInput() {
        return this._start;
    }
    /**
     * @stability stable
     */
    get stdinOpen() {
        return this.getBooleanAttribute('stdin_open');
    }
    /**
     * @stability stable
     */
    set stdinOpen(value) {
        this._stdinOpen = value;
    }
    /**
     * @stability stable
     */
    resetStdinOpen() {
        this._stdinOpen = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get stdinOpenInput() {
        return this._stdinOpen;
    }
    /**
     * @stability stable
     */
    get sysctls() {
        return this.interpolationForAttribute('sysctls');
    }
    /**
     * @stability stable
     */
    set sysctls(value) {
        this._sysctls = value;
    }
    /**
     * @stability stable
     */
    resetSysctls() {
        this._sysctls = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get sysctlsInput() {
        return this._sysctls;
    }
    /**
     * @stability stable
     */
    get tmpfs() {
        return this.interpolationForAttribute('tmpfs');
    }
    /**
     * @stability stable
     */
    set tmpfs(value) {
        this._tmpfs = value;
    }
    /**
     * @stability stable
     */
    resetTmpfs() {
        this._tmpfs = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get tmpfsInput() {
        return this._tmpfs;
    }
    /**
     * @stability stable
     */
    get tty() {
        return this.getBooleanAttribute('tty');
    }
    /**
     * @stability stable
     */
    set tty(value) {
        this._tty = value;
    }
    /**
     * @stability stable
     */
    resetTty() {
        this._tty = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get ttyInput() {
        return this._tty;
    }
    /**
     * @stability stable
     */
    get user() {
        return this.getStringAttribute('user');
    }
    /**
     * @stability stable
     */
    set user(value) {
        this._user = value;
    }
    /**
     * @stability stable
     */
    resetUser() {
        this._user = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get userInput() {
        return this._user;
    }
    /**
     * @stability stable
     */
    get usernsMode() {
        return this.getStringAttribute('userns_mode');
    }
    /**
     * @stability stable
     */
    set usernsMode(value) {
        this._usernsMode = value;
    }
    /**
     * @stability stable
     */
    resetUsernsMode() {
        this._usernsMode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get usernsModeInput() {
        return this._usernsMode;
    }
    /**
     * @stability stable
     */
    get workingDir() {
        return this.getStringAttribute('working_dir');
    }
    /**
     * @stability stable
     */
    set workingDir(value) {
        this._workingDir = value;
    }
    /**
     * @stability stable
     */
    resetWorkingDir() {
        this._workingDir = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get workingDirInput() {
        return this._workingDir;
    }
    /**
     * @stability stable
     */
    get capabilities() {
        return this.interpolationForAttribute('capabilities');
    }
    /**
     * @stability stable
     */
    set capabilities(value) {
        this._capabilities = value;
    }
    /**
     * @stability stable
     */
    resetCapabilities() {
        this._capabilities = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get capabilitiesInput() {
        return this._capabilities;
    }
    /**
     * @stability stable
     */
    get devices() {
        return this.interpolationForAttribute('devices');
    }
    /**
     * @stability stable
     */
    set devices(value) {
        this._devices = value;
    }
    /**
     * @stability stable
     */
    resetDevices() {
        this._devices = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get devicesInput() {
        return this._devices;
    }
    /**
     * @stability stable
     */
    get healthcheck() {
        return this.interpolationForAttribute('healthcheck');
    }
    /**
     * @stability stable
     */
    set healthcheck(value) {
        this._healthcheck = value;
    }
    /**
     * @stability stable
     */
    resetHealthcheck() {
        this._healthcheck = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get healthcheckInput() {
        return this._healthcheck;
    }
    /**
     * @stability stable
     */
    get host() {
        return this.interpolationForAttribute('host');
    }
    /**
     * @stability stable
     */
    set host(value) {
        this._host = value;
    }
    /**
     * @stability stable
     */
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get hostInput() {
        return this._host;
    }
    /**
     * @stability stable
     */
    get labels() {
        return this.interpolationForAttribute('labels');
    }
    /**
     * @stability stable
     */
    set labels(value) {
        this._labels = value;
    }
    /**
     * @stability stable
     */
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get labelsInput() {
        return this._labels;
    }
    /**
     * @stability stable
     */
    get mounts() {
        return this.interpolationForAttribute('mounts');
    }
    /**
     * @stability stable
     */
    set mounts(value) {
        this._mounts = value;
    }
    /**
     * @stability stable
     */
    resetMounts() {
        this._mounts = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get mountsInput() {
        return this._mounts;
    }
    /**
     * @stability stable
     */
    get networksAdvanced() {
        return this.interpolationForAttribute('networks_advanced');
    }
    /**
     * @stability stable
     */
    set networksAdvanced(value) {
        this._networksAdvanced = value;
    }
    /**
     * @stability stable
     */
    resetNetworksAdvanced() {
        this._networksAdvanced = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get networksAdvancedInput() {
        return this._networksAdvanced;
    }
    /**
     * @stability stable
     */
    get ports() {
        return this.interpolationForAttribute('ports');
    }
    /**
     * @stability stable
     */
    set ports(value) {
        this._ports = value;
    }
    /**
     * @stability stable
     */
    resetPorts() {
        this._ports = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get portsInput() {
        return this._ports;
    }
    /**
     * @stability stable
     */
    get ulimit() {
        return this.interpolationForAttribute('ulimit');
    }
    /**
     * @stability stable
     */
    set ulimit(value) {
        this._ulimit = value;
    }
    /**
     * @stability stable
     */
    resetUlimit() {
        this._ulimit = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get ulimitInput() {
        return this._ulimit;
    }
    /**
     * @stability stable
     */
    get upload() {
        return this.interpolationForAttribute('upload');
    }
    /**
     * @stability stable
     */
    set upload(value) {
        this._upload = value;
    }
    /**
     * @stability stable
     */
    resetUpload() {
        this._upload = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get uploadInput() {
        return this._upload;
    }
    /**
     * @stability stable
     */
    get volumes() {
        return this.interpolationForAttribute('volumes');
    }
    /**
     * @stability stable
     */
    set volumes(value) {
        this._volumes = value;
    }
    /**
     * @stability stable
     */
    resetVolumes() {
        this._volumes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get volumesInput() {
        return this._volumes;
    }
    // =========
    // SYNTHESIS
    // =========
    /**
     * @stability stable
     */
    synthesizeAttributes() {
        return {
            attach: cdktf.booleanToTerraform(this._attach),
            command: cdktf.listMapper(cdktf.stringToTerraform)(this._command),
            cpu_set: cdktf.stringToTerraform(this._cpuSet),
            cpu_shares: cdktf.numberToTerraform(this._cpuShares),
            destroy_grace_seconds: cdktf.numberToTerraform(this._destroyGraceSeconds),
            dns: cdktf.listMapper(cdktf.stringToTerraform)(this._dns),
            dns_opts: cdktf.listMapper(cdktf.stringToTerraform)(this._dnsOpts),
            dns_search: cdktf.listMapper(cdktf.stringToTerraform)(this._dnsSearch),
            domainname: cdktf.stringToTerraform(this._domainname),
            entrypoint: cdktf.listMapper(cdktf.stringToTerraform)(this._entrypoint),
            env: cdktf.listMapper(cdktf.stringToTerraform)(this._env),
            group_add: cdktf.listMapper(cdktf.stringToTerraform)(this._groupAdd),
            hostname: cdktf.stringToTerraform(this._hostname),
            image: cdktf.stringToTerraform(this._image),
            init: cdktf.booleanToTerraform(this._init),
            ipc_mode: cdktf.stringToTerraform(this._ipcMode),
            links: cdktf.listMapper(cdktf.stringToTerraform)(this._links),
            log_driver: cdktf.stringToTerraform(this._logDriver),
            log_opts: cdktf.hashMapper(cdktf.anyToTerraform)(this._logOpts),
            logs: cdktf.booleanToTerraform(this._logs),
            max_retry_count: cdktf.numberToTerraform(this._maxRetryCount),
            memory: cdktf.numberToTerraform(this._memory),
            memory_swap: cdktf.numberToTerraform(this._memorySwap),
            must_run: cdktf.booleanToTerraform(this._mustRun),
            name: cdktf.stringToTerraform(this._name),
            network_alias: cdktf.listMapper(cdktf.stringToTerraform)(this._networkAlias),
            network_mode: cdktf.stringToTerraform(this._networkMode),
            networks: cdktf.listMapper(cdktf.stringToTerraform)(this._networks),
            pid_mode: cdktf.stringToTerraform(this._pidMode),
            privileged: cdktf.booleanToTerraform(this._privileged),
            publish_all_ports: cdktf.booleanToTerraform(this._publishAllPorts),
            read_only: cdktf.booleanToTerraform(this._readOnly),
            remove_volumes: cdktf.booleanToTerraform(this._removeVolumes),
            restart: cdktf.stringToTerraform(this._restart),
            rm: cdktf.booleanToTerraform(this._rm),
            security_opts: cdktf.listMapper(cdktf.stringToTerraform)(this._securityOpts),
            shm_size: cdktf.numberToTerraform(this._shmSize),
            start: cdktf.booleanToTerraform(this._start),
            stdin_open: cdktf.booleanToTerraform(this._stdinOpen),
            sysctls: cdktf.hashMapper(cdktf.anyToTerraform)(this._sysctls),
            tmpfs: cdktf.hashMapper(cdktf.anyToTerraform)(this._tmpfs),
            tty: cdktf.booleanToTerraform(this._tty),
            user: cdktf.stringToTerraform(this._user),
            userns_mode: cdktf.stringToTerraform(this._usernsMode),
            working_dir: cdktf.stringToTerraform(this._workingDir),
            capabilities: cdktf.listMapper(containerCapabilitiesToTerraform)(this._capabilities),
            devices: cdktf.listMapper(containerDevicesToTerraform)(this._devices),
            healthcheck: cdktf.listMapper(containerHealthcheckToTerraform)(this._healthcheck),
            host: cdktf.listMapper(containerHostToTerraform)(this._host),
            labels: cdktf.listMapper(containerLabelsToTerraform)(this._labels),
            mounts: cdktf.listMapper(containerMountsToTerraform)(this._mounts),
            networks_advanced: cdktf.listMapper(containerNetworksAdvancedToTerraform)(this._networksAdvanced),
            ports: cdktf.listMapper(containerPortsToTerraform)(this._ports),
            ulimit: cdktf.listMapper(containerUlimitToTerraform)(this._ulimit),
            upload: cdktf.listMapper(containerUploadToTerraform)(this._upload),
            volumes: cdktf.listMapper(containerVolumesToTerraform)(this._volumes),
        };
    }
}
exports.Container = Container;
_b = JSII_RTTI_SYMBOL_1;
Container[_b] = { fqn: "@cdktf/provider-docker.Container", version: "0.2.31" };
//# sourceMappingURL=data:application/json;base64,