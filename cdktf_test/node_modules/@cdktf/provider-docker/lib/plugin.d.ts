import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * @stability stable
 */
export interface PluginConfig extends cdktf.TerraformMetaArguments {
    /**
     * Docker Plugin alias.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/plugin.html#alias Plugin#alias}
     *
     * @stability stable
     */
    readonly alias?: string;
    /**
     * HTTP client timeout to enable the plugin.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/plugin.html#enable_timeout Plugin#enable_timeout}
     *
     * @stability stable
     */
    readonly enableTimeout?: number;
    /**
     * If `true` the plugin is enabled. Defaults to `true`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/plugin.html#enabled Plugin#enabled}
     *
     * @stability stable
     */
    readonly enabled?: boolean;
    /**
     * The environment variables in the form of `KEY=VALUE`, e.g. `DEBUG=0`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/plugin.html#env Plugin#env}
     *
     * @stability stable
     */
    readonly env?: string[];
    /**
     * If true, then the plugin is destroyed forcibly.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/plugin.html#force_destroy Plugin#force_destroy}
     *
     * @stability stable
     */
    readonly forceDestroy?: boolean;
    /**
     * If true, then the plugin is disabled forcibly.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/plugin.html#force_disable Plugin#force_disable}
     *
     * @stability stable
     */
    readonly forceDisable?: boolean;
    /**
     * If true, grant all permissions necessary to run the plugin.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/plugin.html#grant_all_permissions Plugin#grant_all_permissions}
     *
     * @stability stable
     */
    readonly grantAllPermissions?: boolean;
    /**
     * Docker Plugin name.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/plugin.html#name Plugin#name}
     *
     * @stability stable
     */
    readonly name: string;
    /**
     * grant_permissions block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/plugin.html#grant_permissions Plugin#grant_permissions}
     *
     * @stability stable
     */
    readonly grantPermissions?: PluginGrantPermissions[];
}
/**
 * @stability stable
 */
export interface PluginGrantPermissions {
    /**
     * The name of the permission.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/plugin.html#name Plugin#name}
     *
     * @stability stable
     */
    readonly name: string;
    /**
     * The value of the permission.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/plugin.html#value Plugin#value}
     *
     * @stability stable
     */
    readonly value: string[];
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/docker/r/plugin.html docker_plugin}.
 *
 * @stability stable
 */
export declare class Plugin extends cdktf.TerraformResource {
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/docker/r/plugin.html docker_plugin} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config: PluginConfig);
    private _alias?;
    /**
     * @stability stable
     */
    get alias(): string;
    /**
     * @stability stable
     */
    set alias(value: string);
    /**
     * @stability stable
     */
    resetAlias(): void;
    /**
     * @stability stable
     */
    get aliasInput(): string | undefined;
    private _enableTimeout?;
    /**
     * @stability stable
     */
    get enableTimeout(): number;
    /**
     * @stability stable
     */
    set enableTimeout(value: number);
    /**
     * @stability stable
     */
    resetEnableTimeout(): void;
    /**
     * @stability stable
     */
    get enableTimeoutInput(): number | undefined;
    private _enabled?;
    /**
     * @stability stable
     */
    get enabled(): boolean;
    /**
     * @stability stable
     */
    set enabled(value: boolean);
    /**
     * @stability stable
     */
    resetEnabled(): void;
    /**
     * @stability stable
     */
    get enabledInput(): boolean | undefined;
    private _env?;
    /**
     * @stability stable
     */
    get env(): string[];
    /**
     * @stability stable
     */
    set env(value: string[]);
    /**
     * @stability stable
     */
    resetEnv(): void;
    /**
     * @stability stable
     */
    get envInput(): string[] | undefined;
    private _forceDestroy?;
    /**
     * @stability stable
     */
    get forceDestroy(): boolean;
    /**
     * @stability stable
     */
    set forceDestroy(value: boolean);
    /**
     * @stability stable
     */
    resetForceDestroy(): void;
    /**
     * @stability stable
     */
    get forceDestroyInput(): boolean | undefined;
    private _forceDisable?;
    /**
     * @stability stable
     */
    get forceDisable(): boolean;
    /**
     * @stability stable
     */
    set forceDisable(value: boolean);
    /**
     * @stability stable
     */
    resetForceDisable(): void;
    /**
     * @stability stable
     */
    get forceDisableInput(): boolean | undefined;
    private _grantAllPermissions?;
    /**
     * @stability stable
     */
    get grantAllPermissions(): boolean;
    /**
     * @stability stable
     */
    set grantAllPermissions(value: boolean);
    /**
     * @stability stable
     */
    resetGrantAllPermissions(): void;
    /**
     * @stability stable
     */
    get grantAllPermissionsInput(): boolean | undefined;
    /**
     * @stability stable
     */
    get id(): string;
    private _name;
    /**
     * @stability stable
     */
    get name(): string;
    /**
     * @stability stable
     */
    set name(value: string);
    /**
     * @stability stable
     */
    get nameInput(): string;
    /**
     * @stability stable
     */
    get pluginReference(): string;
    private _grantPermissions?;
    /**
     * @stability stable
     */
    get grantPermissions(): PluginGrantPermissions[];
    /**
     * @stability stable
     */
    set grantPermissions(value: PluginGrantPermissions[]);
    /**
     * @stability stable
     */
    resetGrantPermissions(): void;
    /**
     * @stability stable
     */
    get grantPermissionsInput(): PluginGrantPermissions[] | undefined;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
