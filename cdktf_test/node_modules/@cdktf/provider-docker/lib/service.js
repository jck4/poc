"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Service = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function serviceAuthToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        password: cdktf.stringToTerraform(struct.password),
        server_address: cdktf.stringToTerraform(struct.serverAddress),
        username: cdktf.stringToTerraform(struct.username),
    };
}
function serviceConvergeConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delay: cdktf.stringToTerraform(struct.delay),
        timeout: cdktf.stringToTerraform(struct.timeout),
    };
}
function serviceEndpointSpecPortsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        protocol: cdktf.stringToTerraform(struct.protocol),
        publish_mode: cdktf.stringToTerraform(struct.publishMode),
        published_port: cdktf.numberToTerraform(struct.publishedPort),
        target_port: cdktf.numberToTerraform(struct.targetPort),
    };
}
function serviceEndpointSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        mode: cdktf.stringToTerraform(struct.mode),
        ports: cdktf.listMapper(serviceEndpointSpecPortsToTerraform)(struct.ports),
    };
}
function serviceLabelsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        label: cdktf.stringToTerraform(struct.label),
        value: cdktf.stringToTerraform(struct.value),
    };
}
function serviceModeReplicatedToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        replicas: cdktf.numberToTerraform(struct.replicas),
    };
}
function serviceModeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        global: cdktf.booleanToTerraform(struct.global),
        replicated: cdktf.listMapper(serviceModeReplicatedToTerraform)(struct.replicated),
    };
}
function serviceRollbackConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delay: cdktf.stringToTerraform(struct.delay),
        failure_action: cdktf.stringToTerraform(struct.failureAction),
        max_failure_ratio: cdktf.stringToTerraform(struct.maxFailureRatio),
        monitor: cdktf.stringToTerraform(struct.monitor),
        order: cdktf.stringToTerraform(struct.order),
        parallelism: cdktf.numberToTerraform(struct.parallelism),
    };
}
function serviceTaskSpecContainerSpecConfigsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        config_id: cdktf.stringToTerraform(struct.configId),
        config_name: cdktf.stringToTerraform(struct.configName),
        file_gid: cdktf.stringToTerraform(struct.fileGid),
        file_mode: cdktf.numberToTerraform(struct.fileMode),
        file_name: cdktf.stringToTerraform(struct.fileName),
        file_uid: cdktf.stringToTerraform(struct.fileUid),
    };
}
function serviceTaskSpecContainerSpecDnsConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        nameservers: cdktf.listMapper(cdktf.stringToTerraform)(struct.nameservers),
        options: cdktf.listMapper(cdktf.stringToTerraform)(struct.options),
        search: cdktf.listMapper(cdktf.stringToTerraform)(struct.search),
    };
}
function serviceTaskSpecContainerSpecHealthcheckToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        interval: cdktf.stringToTerraform(struct.interval),
        retries: cdktf.numberToTerraform(struct.retries),
        start_period: cdktf.stringToTerraform(struct.startPeriod),
        test: cdktf.listMapper(cdktf.stringToTerraform)(struct.test),
        timeout: cdktf.stringToTerraform(struct.timeout),
    };
}
function serviceTaskSpecContainerSpecHostsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        host: cdktf.stringToTerraform(struct.host),
        ip: cdktf.stringToTerraform(struct.ip),
    };
}
function serviceTaskSpecContainerSpecLabelsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        label: cdktf.stringToTerraform(struct.label),
        value: cdktf.stringToTerraform(struct.value),
    };
}
function serviceTaskSpecContainerSpecMountsBindOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        propagation: cdktf.stringToTerraform(struct.propagation),
    };
}
function serviceTaskSpecContainerSpecMountsTmpfsOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        mode: cdktf.numberToTerraform(struct.mode),
        size_bytes: cdktf.numberToTerraform(struct.sizeBytes),
    };
}
function serviceTaskSpecContainerSpecMountsVolumeOptionsLabelsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        label: cdktf.stringToTerraform(struct.label),
        value: cdktf.stringToTerraform(struct.value),
    };
}
function serviceTaskSpecContainerSpecMountsVolumeOptionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        driver_name: cdktf.stringToTerraform(struct.driverName),
        driver_options: cdktf.hashMapper(cdktf.anyToTerraform)(struct.driverOptions),
        no_copy: cdktf.booleanToTerraform(struct.noCopy),
        labels: cdktf.listMapper(serviceTaskSpecContainerSpecMountsVolumeOptionsLabelsToTerraform)(struct.labels),
    };
}
function serviceTaskSpecContainerSpecMountsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        read_only: cdktf.booleanToTerraform(struct.readOnly),
        source: cdktf.stringToTerraform(struct.source),
        target: cdktf.stringToTerraform(struct.target),
        type: cdktf.stringToTerraform(struct.type),
        bind_options: cdktf.listMapper(serviceTaskSpecContainerSpecMountsBindOptionsToTerraform)(struct.bindOptions),
        tmpfs_options: cdktf.listMapper(serviceTaskSpecContainerSpecMountsTmpfsOptionsToTerraform)(struct.tmpfsOptions),
        volume_options: cdktf.listMapper(serviceTaskSpecContainerSpecMountsVolumeOptionsToTerraform)(struct.volumeOptions),
    };
}
function serviceTaskSpecContainerSpecPrivilegesCredentialSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        file: cdktf.stringToTerraform(struct.file),
        registry: cdktf.stringToTerraform(struct.registry),
    };
}
function serviceTaskSpecContainerSpecPrivilegesSeLinuxContextToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        disable: cdktf.booleanToTerraform(struct.disable),
        level: cdktf.stringToTerraform(struct.level),
        role: cdktf.stringToTerraform(struct.role),
        type: cdktf.stringToTerraform(struct.type),
        user: cdktf.stringToTerraform(struct.user),
    };
}
function serviceTaskSpecContainerSpecPrivilegesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        credential_spec: cdktf.listMapper(serviceTaskSpecContainerSpecPrivilegesCredentialSpecToTerraform)(struct.credentialSpec),
        se_linux_context: cdktf.listMapper(serviceTaskSpecContainerSpecPrivilegesSeLinuxContextToTerraform)(struct.seLinuxContext),
    };
}
function serviceTaskSpecContainerSpecSecretsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        file_gid: cdktf.stringToTerraform(struct.fileGid),
        file_mode: cdktf.numberToTerraform(struct.fileMode),
        file_name: cdktf.stringToTerraform(struct.fileName),
        file_uid: cdktf.stringToTerraform(struct.fileUid),
        secret_id: cdktf.stringToTerraform(struct.secretId),
        secret_name: cdktf.stringToTerraform(struct.secretName),
    };
}
function serviceTaskSpecContainerSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        args: cdktf.listMapper(cdktf.stringToTerraform)(struct.args),
        command: cdktf.listMapper(cdktf.stringToTerraform)(struct.command),
        dir: cdktf.stringToTerraform(struct.dir),
        env: cdktf.hashMapper(cdktf.anyToTerraform)(struct.env),
        groups: cdktf.listMapper(cdktf.stringToTerraform)(struct.groups),
        hostname: cdktf.stringToTerraform(struct.hostname),
        image: cdktf.stringToTerraform(struct.image),
        isolation: cdktf.stringToTerraform(struct.isolation),
        read_only: cdktf.booleanToTerraform(struct.readOnly),
        stop_grace_period: cdktf.stringToTerraform(struct.stopGracePeriod),
        stop_signal: cdktf.stringToTerraform(struct.stopSignal),
        user: cdktf.stringToTerraform(struct.user),
        configs: cdktf.listMapper(serviceTaskSpecContainerSpecConfigsToTerraform)(struct.configs),
        dns_config: cdktf.listMapper(serviceTaskSpecContainerSpecDnsConfigToTerraform)(struct.dnsConfig),
        healthcheck: cdktf.listMapper(serviceTaskSpecContainerSpecHealthcheckToTerraform)(struct.healthcheck),
        hosts: cdktf.listMapper(serviceTaskSpecContainerSpecHostsToTerraform)(struct.hosts),
        labels: cdktf.listMapper(serviceTaskSpecContainerSpecLabelsToTerraform)(struct.labels),
        mounts: cdktf.listMapper(serviceTaskSpecContainerSpecMountsToTerraform)(struct.mounts),
        privileges: cdktf.listMapper(serviceTaskSpecContainerSpecPrivilegesToTerraform)(struct.privileges),
        secrets: cdktf.listMapper(serviceTaskSpecContainerSpecSecretsToTerraform)(struct.secrets),
    };
}
function serviceTaskSpecLogDriverToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        options: cdktf.hashMapper(cdktf.anyToTerraform)(struct.options),
    };
}
function serviceTaskSpecPlacementPlatformsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        architecture: cdktf.stringToTerraform(struct.architecture),
        os: cdktf.stringToTerraform(struct.os),
    };
}
function serviceTaskSpecPlacementToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        constraints: cdktf.listMapper(cdktf.stringToTerraform)(struct.constraints),
        max_replicas: cdktf.numberToTerraform(struct.maxReplicas),
        prefs: cdktf.listMapper(cdktf.stringToTerraform)(struct.prefs),
        platforms: cdktf.listMapper(serviceTaskSpecPlacementPlatformsToTerraform)(struct.platforms),
    };
}
function serviceTaskSpecResourcesLimitsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        memory_bytes: cdktf.numberToTerraform(struct.memoryBytes),
        nano_cpus: cdktf.numberToTerraform(struct.nanoCpus),
    };
}
function serviceTaskSpecResourcesReservationGenericResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        discrete_resources_spec: cdktf.listMapper(cdktf.stringToTerraform)(struct.discreteResourcesSpec),
        named_resources_spec: cdktf.listMapper(cdktf.stringToTerraform)(struct.namedResourcesSpec),
    };
}
function serviceTaskSpecResourcesReservationToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        memory_bytes: cdktf.numberToTerraform(struct.memoryBytes),
        nano_cpus: cdktf.numberToTerraform(struct.nanoCpus),
        generic_resources: cdktf.listMapper(serviceTaskSpecResourcesReservationGenericResourcesToTerraform)(struct.genericResources),
    };
}
function serviceTaskSpecResourcesToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        limits: cdktf.listMapper(serviceTaskSpecResourcesLimitsToTerraform)(struct.limits),
        reservation: cdktf.listMapper(serviceTaskSpecResourcesReservationToTerraform)(struct.reservation),
    };
}
function serviceTaskSpecRestartPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        condition: cdktf.stringToTerraform(struct.condition),
        delay: cdktf.stringToTerraform(struct.delay),
        max_attempts: cdktf.numberToTerraform(struct.maxAttempts),
        window: cdktf.stringToTerraform(struct.window),
    };
}
function serviceTaskSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        force_update: cdktf.numberToTerraform(struct.forceUpdate),
        networks: cdktf.listMapper(cdktf.stringToTerraform)(struct.networks),
        runtime: cdktf.stringToTerraform(struct.runtime),
        container_spec: cdktf.listMapper(serviceTaskSpecContainerSpecToTerraform)(struct.containerSpec),
        log_driver: cdktf.listMapper(serviceTaskSpecLogDriverToTerraform)(struct.logDriver),
        placement: cdktf.listMapper(serviceTaskSpecPlacementToTerraform)(struct.placement),
        resources: cdktf.listMapper(serviceTaskSpecResourcesToTerraform)(struct.resources),
        restart_policy: cdktf.listMapper(serviceTaskSpecRestartPolicyToTerraform)(struct.restartPolicy),
    };
}
function serviceUpdateConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        delay: cdktf.stringToTerraform(struct.delay),
        failure_action: cdktf.stringToTerraform(struct.failureAction),
        max_failure_ratio: cdktf.stringToTerraform(struct.maxFailureRatio),
        monitor: cdktf.stringToTerraform(struct.monitor),
        order: cdktf.stringToTerraform(struct.order),
        parallelism: cdktf.numberToTerraform(struct.parallelism),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/docker/r/service.html docker_service}.
 *
 * @stability stable
 */
class Service extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/docker/r/service.html docker_service} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'docker_service',
            terraformGeneratorMetadata: {
                providerName: 'docker'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._name = config.name;
        this._auth = config.auth;
        this._convergeConfig = config.convergeConfig;
        this._endpointSpec = config.endpointSpec;
        this._labels = config.labels;
        this._mode = config.mode;
        this._rollbackConfig = config.rollbackConfig;
        this._taskSpec = config.taskSpec;
        this._updateConfig = config.updateConfig;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: true, required: false
    /**
     * @stability stable
     */
    get id() {
        return this.getStringAttribute('id');
    }
    /**
     * @stability stable
     */
    get name() {
        return this.getStringAttribute('name');
    }
    /**
     * @stability stable
     */
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get nameInput() {
        return this._name;
    }
    /**
     * @stability stable
     */
    get auth() {
        return this.interpolationForAttribute('auth');
    }
    /**
     * @stability stable
     */
    set auth(value) {
        this._auth = value;
    }
    /**
     * @stability stable
     */
    resetAuth() {
        this._auth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get authInput() {
        return this._auth;
    }
    /**
     * @stability stable
     */
    get convergeConfig() {
        return this.interpolationForAttribute('converge_config');
    }
    /**
     * @stability stable
     */
    set convergeConfig(value) {
        this._convergeConfig = value;
    }
    /**
     * @stability stable
     */
    resetConvergeConfig() {
        this._convergeConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get convergeConfigInput() {
        return this._convergeConfig;
    }
    /**
     * @stability stable
     */
    get endpointSpec() {
        return this.interpolationForAttribute('endpoint_spec');
    }
    /**
     * @stability stable
     */
    set endpointSpec(value) {
        this._endpointSpec = value;
    }
    /**
     * @stability stable
     */
    resetEndpointSpec() {
        this._endpointSpec = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get endpointSpecInput() {
        return this._endpointSpec;
    }
    /**
     * @stability stable
     */
    get labels() {
        return this.interpolationForAttribute('labels');
    }
    /**
     * @stability stable
     */
    set labels(value) {
        this._labels = value;
    }
    /**
     * @stability stable
     */
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get labelsInput() {
        return this._labels;
    }
    /**
     * @stability stable
     */
    get mode() {
        return this.interpolationForAttribute('mode');
    }
    /**
     * @stability stable
     */
    set mode(value) {
        this._mode = value;
    }
    /**
     * @stability stable
     */
    resetMode() {
        this._mode = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get modeInput() {
        return this._mode;
    }
    /**
     * @stability stable
     */
    get rollbackConfig() {
        return this.interpolationForAttribute('rollback_config');
    }
    /**
     * @stability stable
     */
    set rollbackConfig(value) {
        this._rollbackConfig = value;
    }
    /**
     * @stability stable
     */
    resetRollbackConfig() {
        this._rollbackConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get rollbackConfigInput() {
        return this._rollbackConfig;
    }
    /**
     * @stability stable
     */
    get taskSpec() {
        return this.interpolationForAttribute('task_spec');
    }
    /**
     * @stability stable
     */
    set taskSpec(value) {
        this._taskSpec = value;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get taskSpecInput() {
        return this._taskSpec;
    }
    /**
     * @stability stable
     */
    get updateConfig() {
        return this.interpolationForAttribute('update_config');
    }
    /**
     * @stability stable
     */
    set updateConfig(value) {
        this._updateConfig = value;
    }
    /**
     * @stability stable
     */
    resetUpdateConfig() {
        this._updateConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get updateConfigInput() {
        return this._updateConfig;
    }
    // =========
    // SYNTHESIS
    // =========
    /**
     * @stability stable
     */
    synthesizeAttributes() {
        return {
            name: cdktf.stringToTerraform(this._name),
            auth: cdktf.listMapper(serviceAuthToTerraform)(this._auth),
            converge_config: cdktf.listMapper(serviceConvergeConfigToTerraform)(this._convergeConfig),
            endpoint_spec: cdktf.listMapper(serviceEndpointSpecToTerraform)(this._endpointSpec),
            labels: cdktf.listMapper(serviceLabelsToTerraform)(this._labels),
            mode: cdktf.listMapper(serviceModeToTerraform)(this._mode),
            rollback_config: cdktf.listMapper(serviceRollbackConfigToTerraform)(this._rollbackConfig),
            task_spec: cdktf.listMapper(serviceTaskSpecToTerraform)(this._taskSpec),
            update_config: cdktf.listMapper(serviceUpdateConfigToTerraform)(this._updateConfig),
        };
    }
}
exports.Service = Service;
_a = JSII_RTTI_SYMBOL_1;
Service[_a] = { fqn: "@cdktf/provider-docker.Service", version: "0.2.31" };
//# sourceMappingURL=data:application/json;base64,