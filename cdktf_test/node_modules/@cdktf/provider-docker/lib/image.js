"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Image = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function imageBuildToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        build_arg: cdktf.hashMapper(cdktf.anyToTerraform)(struct.buildArg),
        dockerfile: cdktf.stringToTerraform(struct.dockerfile),
        force_remove: cdktf.booleanToTerraform(struct.forceRemove),
        label: cdktf.hashMapper(cdktf.anyToTerraform)(struct.label),
        no_cache: cdktf.booleanToTerraform(struct.noCache),
        path: cdktf.stringToTerraform(struct.path),
        remove: cdktf.booleanToTerraform(struct.remove),
        tag: cdktf.listMapper(cdktf.stringToTerraform)(struct.tag),
        target: cdktf.stringToTerraform(struct.target),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/docker/r/image.html docker_image}.
 *
 * @stability stable
 */
class Image extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/docker/r/image.html docker_image} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'docker_image',
            terraformGeneratorMetadata: {
                providerName: 'docker'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._forceRemove = config.forceRemove;
        this._keepLocally = config.keepLocally;
        this._name = config.name;
        this._pullTrigger = config.pullTrigger;
        this._pullTriggers = config.pullTriggers;
        this._build = config.buildAttribute;
    }
    /**
     * @stability stable
     */
    get forceRemove() {
        return this.getBooleanAttribute('force_remove');
    }
    /**
     * @stability stable
     */
    set forceRemove(value) {
        this._forceRemove = value;
    }
    /**
     * @stability stable
     */
    resetForceRemove() {
        this._forceRemove = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get forceRemoveInput() {
        return this._forceRemove;
    }
    // id - computed: true, optional: true, required: false
    /**
     * @stability stable
     */
    get id() {
        return this.getStringAttribute('id');
    }
    /**
     * @stability stable
     */
    get keepLocally() {
        return this.getBooleanAttribute('keep_locally');
    }
    /**
     * @stability stable
     */
    set keepLocally(value) {
        this._keepLocally = value;
    }
    /**
     * @stability stable
     */
    resetKeepLocally() {
        this._keepLocally = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get keepLocallyInput() {
        return this._keepLocally;
    }
    // latest - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get latest() {
        return this.getStringAttribute('latest');
    }
    /**
     * @stability stable
     */
    get name() {
        return this.getStringAttribute('name');
    }
    /**
     * @stability stable
     */
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get nameInput() {
        return this._name;
    }
    // output - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get output() {
        return this.getStringAttribute('output');
    }
    /**
     * @stability stable
     */
    get pullTrigger() {
        return this.getStringAttribute('pull_trigger');
    }
    /**
     * @stability stable
     */
    set pullTrigger(value) {
        this._pullTrigger = value;
    }
    /**
     * @stability stable
     */
    resetPullTrigger() {
        this._pullTrigger = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get pullTriggerInput() {
        return this._pullTrigger;
    }
    /**
     * @stability stable
     */
    get pullTriggers() {
        return this.getListAttribute('pull_triggers');
    }
    /**
     * @stability stable
     */
    set pullTriggers(value) {
        this._pullTriggers = value;
    }
    /**
     * @stability stable
     */
    resetPullTriggers() {
        this._pullTriggers = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get pullTriggersInput() {
        return this._pullTriggers;
    }
    /**
     * @stability stable
     */
    get buildAttribute() {
        return this.interpolationForAttribute('build');
    }
    /**
     * @stability stable
     */
    set buildAttribute(value) {
        this._build = value;
    }
    /**
     * @stability stable
     */
    resetBuildAttribute() {
        this._build = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get buildAttributeInput() {
        return this._build;
    }
    // =========
    // SYNTHESIS
    // =========
    /**
     * @stability stable
     */
    synthesizeAttributes() {
        return {
            force_remove: cdktf.booleanToTerraform(this._forceRemove),
            keep_locally: cdktf.booleanToTerraform(this._keepLocally),
            name: cdktf.stringToTerraform(this._name),
            pull_trigger: cdktf.stringToTerraform(this._pullTrigger),
            pull_triggers: cdktf.listMapper(cdktf.stringToTerraform)(this._pullTriggers),
            build: cdktf.listMapper(imageBuildToTerraform)(this._build),
        };
    }
}
exports.Image = Image;
_a = JSII_RTTI_SYMBOL_1;
Image[_a] = { fqn: "@cdktf/provider-docker.Image", version: "0.2.31" };
//# sourceMappingURL=data:application/json;base64,