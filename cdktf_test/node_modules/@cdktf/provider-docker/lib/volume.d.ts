import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * @stability stable
 */
export interface VolumeConfig extends cdktf.TerraformMetaArguments {
    /**
     * Driver type for the volume. Defaults to `local`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/volume.html#driver Volume#driver}
     *
     * @stability stable
     */
    readonly driver?: string;
    /**
     * Options specific to the driver.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/volume.html#driver_opts Volume#driver_opts}
     *
     * @stability stable
     */
    readonly driverOpts?: {
        [key: string]: string;
    };
    /**
     * The name of the Docker volume (will be generated if not provided).
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/volume.html#name Volume#name}
     *
     * @stability stable
     */
    readonly name?: string;
    /**
     * labels block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/volume.html#labels Volume#labels}
     *
     * @stability stable
     */
    readonly labels?: VolumeLabels[];
}
/**
 * @stability stable
 */
export interface VolumeLabels {
    /**
     * Name of the label.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/volume.html#label Volume#label}
     *
     * @stability stable
     */
    readonly label: string;
    /**
     * Value of the label.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/volume.html#value Volume#value}
     *
     * @stability stable
     */
    readonly value: string;
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/docker/r/volume.html docker_volume}.
 *
 * @stability stable
 */
export declare class Volume extends cdktf.TerraformResource {
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/docker/r/volume.html docker_volume} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config?: VolumeConfig);
    private _driver?;
    /**
     * @stability stable
     */
    get driver(): string;
    /**
     * @stability stable
     */
    set driver(value: string);
    /**
     * @stability stable
     */
    resetDriver(): void;
    /**
     * @stability stable
     */
    get driverInput(): string | undefined;
    private _driverOpts?;
    /**
     * @stability stable
     */
    get driverOpts(): {
        [key: string]: string;
    };
    /**
     * @stability stable
     */
    set driverOpts(value: {
        [key: string]: string;
    });
    /**
     * @stability stable
     */
    resetDriverOpts(): void;
    /**
     * @stability stable
     */
    get driverOptsInput(): {
        [key: string]: string;
    } | undefined;
    /**
     * @stability stable
     */
    get id(): string;
    /**
     * @stability stable
     */
    get mountpoint(): string;
    private _name?;
    /**
     * @stability stable
     */
    get name(): string;
    /**
     * @stability stable
     */
    set name(value: string);
    /**
     * @stability stable
     */
    resetName(): void;
    /**
     * @stability stable
     */
    get nameInput(): string | undefined;
    private _labels?;
    /**
     * @stability stable
     */
    get labels(): VolumeLabels[];
    /**
     * @stability stable
     */
    set labels(value: VolumeLabels[]);
    /**
     * @stability stable
     */
    resetLabels(): void;
    /**
     * @stability stable
     */
    get labelsInput(): VolumeLabels[] | undefined;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
