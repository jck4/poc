"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DockerProvider = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dockerProviderRegistryAuthToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        address: cdktf.stringToTerraform(struct.address),
        config_file: cdktf.stringToTerraform(struct.configFile),
        config_file_content: cdktf.stringToTerraform(struct.configFileContent),
        password: cdktf.stringToTerraform(struct.password),
        username: cdktf.stringToTerraform(struct.username),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/docker docker}.
 *
 * @stability stable
 */
class DockerProvider extends cdktf.TerraformProvider {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/docker docker} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'docker',
            terraformGeneratorMetadata: {
                providerName: 'docker',
                providerVersionConstraint: '~> 2.12'
            },
            terraformProviderSource: 'kreuzwerker/docker'
        });
        this._caMaterial = config.caMaterial;
        this._certMaterial = config.certMaterial;
        this._certPath = config.certPath;
        this._host = config.host;
        this._keyMaterial = config.keyMaterial;
        this._alias = config.alias;
        this._registryAuth = config.registryAuth;
    }
    /**
     * @stability stable
     */
    get caMaterial() {
        return this._caMaterial;
    }
    /**
     * @stability stable
     */
    set caMaterial(value) {
        this._caMaterial = value;
    }
    /**
     * @stability stable
     */
    resetCaMaterial() {
        this._caMaterial = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get caMaterialInput() {
        return this._caMaterial;
    }
    /**
     * @stability stable
     */
    get certMaterial() {
        return this._certMaterial;
    }
    /**
     * @stability stable
     */
    set certMaterial(value) {
        this._certMaterial = value;
    }
    /**
     * @stability stable
     */
    resetCertMaterial() {
        this._certMaterial = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get certMaterialInput() {
        return this._certMaterial;
    }
    /**
     * @stability stable
     */
    get certPath() {
        return this._certPath;
    }
    /**
     * @stability stable
     */
    set certPath(value) {
        this._certPath = value;
    }
    /**
     * @stability stable
     */
    resetCertPath() {
        this._certPath = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get certPathInput() {
        return this._certPath;
    }
    /**
     * @stability stable
     */
    get host() {
        return this._host;
    }
    /**
     * @stability stable
     */
    set host(value) {
        this._host = value;
    }
    /**
     * @stability stable
     */
    resetHost() {
        this._host = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get hostInput() {
        return this._host;
    }
    /**
     * @stability stable
     */
    get keyMaterial() {
        return this._keyMaterial;
    }
    /**
     * @stability stable
     */
    set keyMaterial(value) {
        this._keyMaterial = value;
    }
    /**
     * @stability stable
     */
    resetKeyMaterial() {
        this._keyMaterial = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get keyMaterialInput() {
        return this._keyMaterial;
    }
    /**
     * @stability stable
     */
    get alias() {
        return this._alias;
    }
    /**
     * @stability stable
     */
    set alias(value) {
        this._alias = value;
    }
    /**
     * @stability stable
     */
    resetAlias() {
        this._alias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get aliasInput() {
        return this._alias;
    }
    /**
     * @stability stable
     */
    get registryAuth() {
        return this._registryAuth;
    }
    /**
     * @stability stable
     */
    set registryAuth(value) {
        this._registryAuth = value;
    }
    /**
     * @stability stable
     */
    resetRegistryAuth() {
        this._registryAuth = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get registryAuthInput() {
        return this._registryAuth;
    }
    // =========
    // SYNTHESIS
    // =========
    /**
     * @stability stable
     */
    synthesizeAttributes() {
        return {
            ca_material: cdktf.stringToTerraform(this._caMaterial),
            cert_material: cdktf.stringToTerraform(this._certMaterial),
            cert_path: cdktf.stringToTerraform(this._certPath),
            host: cdktf.stringToTerraform(this._host),
            key_material: cdktf.stringToTerraform(this._keyMaterial),
            alias: cdktf.stringToTerraform(this._alias),
            registry_auth: cdktf.listMapper(dockerProviderRegistryAuthToTerraform)(this._registryAuth),
        };
    }
}
exports.DockerProvider = DockerProvider;
_a = JSII_RTTI_SYMBOL_1;
DockerProvider[_a] = { fqn: "@cdktf/provider-docker.DockerProvider", version: "0.2.31" };
//# sourceMappingURL=data:application/json;base64,