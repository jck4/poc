"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugin = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function pluginGrantPermissionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        value: cdktf.listMapper(cdktf.stringToTerraform)(struct.value),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/docker/r/plugin.html docker_plugin}.
 *
 * @stability stable
 */
class Plugin extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/docker/r/plugin.html docker_plugin} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'docker_plugin',
            terraformGeneratorMetadata: {
                providerName: 'docker'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._alias = config.alias;
        this._enableTimeout = config.enableTimeout;
        this._enabled = config.enabled;
        this._env = config.env;
        this._forceDestroy = config.forceDestroy;
        this._forceDisable = config.forceDisable;
        this._grantAllPermissions = config.grantAllPermissions;
        this._name = config.name;
        this._grantPermissions = config.grantPermissions;
    }
    /**
     * @stability stable
     */
    get alias() {
        return this.getStringAttribute('alias');
    }
    /**
     * @stability stable
     */
    set alias(value) {
        this._alias = value;
    }
    /**
     * @stability stable
     */
    resetAlias() {
        this._alias = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get aliasInput() {
        return this._alias;
    }
    /**
     * @stability stable
     */
    get enableTimeout() {
        return this.getNumberAttribute('enable_timeout');
    }
    /**
     * @stability stable
     */
    set enableTimeout(value) {
        this._enableTimeout = value;
    }
    /**
     * @stability stable
     */
    resetEnableTimeout() {
        this._enableTimeout = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get enableTimeoutInput() {
        return this._enableTimeout;
    }
    /**
     * @stability stable
     */
    get enabled() {
        return this.getBooleanAttribute('enabled');
    }
    /**
     * @stability stable
     */
    set enabled(value) {
        this._enabled = value;
    }
    /**
     * @stability stable
     */
    resetEnabled() {
        this._enabled = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get enabledInput() {
        return this._enabled;
    }
    /**
     * @stability stable
     */
    get env() {
        return this.getListAttribute('env');
    }
    /**
     * @stability stable
     */
    set env(value) {
        this._env = value;
    }
    /**
     * @stability stable
     */
    resetEnv() {
        this._env = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get envInput() {
        return this._env;
    }
    /**
     * @stability stable
     */
    get forceDestroy() {
        return this.getBooleanAttribute('force_destroy');
    }
    /**
     * @stability stable
     */
    set forceDestroy(value) {
        this._forceDestroy = value;
    }
    /**
     * @stability stable
     */
    resetForceDestroy() {
        this._forceDestroy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get forceDestroyInput() {
        return this._forceDestroy;
    }
    /**
     * @stability stable
     */
    get forceDisable() {
        return this.getBooleanAttribute('force_disable');
    }
    /**
     * @stability stable
     */
    set forceDisable(value) {
        this._forceDisable = value;
    }
    /**
     * @stability stable
     */
    resetForceDisable() {
        this._forceDisable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get forceDisableInput() {
        return this._forceDisable;
    }
    /**
     * @stability stable
     */
    get grantAllPermissions() {
        return this.getBooleanAttribute('grant_all_permissions');
    }
    /**
     * @stability stable
     */
    set grantAllPermissions(value) {
        this._grantAllPermissions = value;
    }
    /**
     * @stability stable
     */
    resetGrantAllPermissions() {
        this._grantAllPermissions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get grantAllPermissionsInput() {
        return this._grantAllPermissions;
    }
    // id - computed: true, optional: true, required: false
    /**
     * @stability stable
     */
    get id() {
        return this.getStringAttribute('id');
    }
    /**
     * @stability stable
     */
    get name() {
        return this.getStringAttribute('name');
    }
    /**
     * @stability stable
     */
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get nameInput() {
        return this._name;
    }
    // plugin_reference - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get pluginReference() {
        return this.getStringAttribute('plugin_reference');
    }
    /**
     * @stability stable
     */
    get grantPermissions() {
        return this.interpolationForAttribute('grant_permissions');
    }
    /**
     * @stability stable
     */
    set grantPermissions(value) {
        this._grantPermissions = value;
    }
    /**
     * @stability stable
     */
    resetGrantPermissions() {
        this._grantPermissions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get grantPermissionsInput() {
        return this._grantPermissions;
    }
    // =========
    // SYNTHESIS
    // =========
    /**
     * @stability stable
     */
    synthesizeAttributes() {
        return {
            alias: cdktf.stringToTerraform(this._alias),
            enable_timeout: cdktf.numberToTerraform(this._enableTimeout),
            enabled: cdktf.booleanToTerraform(this._enabled),
            env: cdktf.listMapper(cdktf.stringToTerraform)(this._env),
            force_destroy: cdktf.booleanToTerraform(this._forceDestroy),
            force_disable: cdktf.booleanToTerraform(this._forceDisable),
            grant_all_permissions: cdktf.booleanToTerraform(this._grantAllPermissions),
            name: cdktf.stringToTerraform(this._name),
            grant_permissions: cdktf.listMapper(pluginGrantPermissionsToTerraform)(this._grantPermissions),
        };
    }
}
exports.Plugin = Plugin;
_a = JSII_RTTI_SYMBOL_1;
Plugin[_a] = { fqn: "@cdktf/provider-docker.Plugin", version: "0.2.31" };
//# sourceMappingURL=data:application/json;base64,