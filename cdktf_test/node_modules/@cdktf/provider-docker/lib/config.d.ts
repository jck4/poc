import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * @stability stable
 */
export interface ConfigConfig extends cdktf.TerraformMetaArguments {
    /**
     * Base64-url-safe-encoded config data.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/config.html#data Config#data}
     *
     * @stability stable
     */
    readonly data: string;
    /**
     * User-defined name of the config.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/config.html#name Config#name}
     *
     * @stability stable
     */
    readonly name: string;
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/docker/r/config.html docker_config}.
 *
 * @stability stable
 */
export declare class Config extends cdktf.TerraformResource {
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/docker/r/config.html docker_config} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config: ConfigConfig);
    private _data;
    /**
     * @stability stable
     */
    get data(): string;
    /**
     * @stability stable
     */
    set data(value: string);
    /**
     * @stability stable
     */
    get dataInput(): string;
    /**
     * @stability stable
     */
    get id(): string;
    private _name;
    /**
     * @stability stable
     */
    get name(): string;
    /**
     * @stability stable
     */
    set name(value: string);
    /**
     * @stability stable
     */
    get nameInput(): string;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
