"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Network = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function networkIpamConfigToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        aux_address: cdktf.hashMapper(cdktf.anyToTerraform)(struct.auxAddress),
        gateway: cdktf.stringToTerraform(struct.gateway),
        ip_range: cdktf.stringToTerraform(struct.ipRange),
        subnet: cdktf.stringToTerraform(struct.subnet),
    };
}
function networkLabelsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    return {
        label: cdktf.stringToTerraform(struct.label),
        value: cdktf.stringToTerraform(struct.value),
    };
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/docker/r/network.html docker_network}.
 *
 * @stability stable
 */
class Network extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/docker/r/network.html docker_network} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'docker_network',
            terraformGeneratorMetadata: {
                providerName: 'docker'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._attachable = config.attachable;
        this._checkDuplicate = config.checkDuplicate;
        this._driver = config.driver;
        this._ingress = config.ingress;
        this._internal = config.internal;
        this._ipamDriver = config.ipamDriver;
        this._ipv6 = config.ipv6;
        this._name = config.name;
        this._options = config.options;
        this._ipamConfig = config.ipamConfig;
        this._labels = config.labels;
    }
    /**
     * @stability stable
     */
    get attachable() {
        return this.getBooleanAttribute('attachable');
    }
    /**
     * @stability stable
     */
    set attachable(value) {
        this._attachable = value;
    }
    /**
     * @stability stable
     */
    resetAttachable() {
        this._attachable = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get attachableInput() {
        return this._attachable;
    }
    /**
     * @stability stable
     */
    get checkDuplicate() {
        return this.getBooleanAttribute('check_duplicate');
    }
    /**
     * @stability stable
     */
    set checkDuplicate(value) {
        this._checkDuplicate = value;
    }
    /**
     * @stability stable
     */
    resetCheckDuplicate() {
        this._checkDuplicate = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get checkDuplicateInput() {
        return this._checkDuplicate;
    }
    /**
     * @stability stable
     */
    get driver() {
        return this.getStringAttribute('driver');
    }
    /**
     * @stability stable
     */
    set driver(value) {
        this._driver = value;
    }
    /**
     * @stability stable
     */
    resetDriver() {
        this._driver = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get driverInput() {
        return this._driver;
    }
    // id - computed: true, optional: true, required: false
    /**
     * @stability stable
     */
    get id() {
        return this.getStringAttribute('id');
    }
    /**
     * @stability stable
     */
    get ingress() {
        return this.getBooleanAttribute('ingress');
    }
    /**
     * @stability stable
     */
    set ingress(value) {
        this._ingress = value;
    }
    /**
     * @stability stable
     */
    resetIngress() {
        this._ingress = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get ingressInput() {
        return this._ingress;
    }
    /**
     * @stability stable
     */
    get internal() {
        return this.getBooleanAttribute('internal');
    }
    /**
     * @stability stable
     */
    set internal(value) {
        this._internal = value;
    }
    /**
     * @stability stable
     */
    resetInternal() {
        this._internal = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get internalInput() {
        return this._internal;
    }
    /**
     * @stability stable
     */
    get ipamDriver() {
        return this.getStringAttribute('ipam_driver');
    }
    /**
     * @stability stable
     */
    set ipamDriver(value) {
        this._ipamDriver = value;
    }
    /**
     * @stability stable
     */
    resetIpamDriver() {
        this._ipamDriver = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get ipamDriverInput() {
        return this._ipamDriver;
    }
    /**
     * @stability stable
     */
    get ipv6() {
        return this.getBooleanAttribute('ipv6');
    }
    /**
     * @stability stable
     */
    set ipv6(value) {
        this._ipv6 = value;
    }
    /**
     * @stability stable
     */
    resetIpv6() {
        this._ipv6 = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get ipv6Input() {
        return this._ipv6;
    }
    /**
     * @stability stable
     */
    get name() {
        return this.getStringAttribute('name');
    }
    /**
     * @stability stable
     */
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get nameInput() {
        return this._name;
    }
    /**
     * @stability stable
     */
    get options() {
        return this.interpolationForAttribute('options'); // Getting the computed value is not yet implemented
    }
    /**
     * @stability stable
     */
    set options(value) {
        this._options = value;
    }
    /**
     * @stability stable
     */
    resetOptions() {
        this._options = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get optionsInput() {
        return this._options;
    }
    // scope - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get scope() {
        return this.getStringAttribute('scope');
    }
    /**
     * @stability stable
     */
    get ipamConfig() {
        return this.interpolationForAttribute('ipam_config');
    }
    /**
     * @stability stable
     */
    set ipamConfig(value) {
        this._ipamConfig = value;
    }
    /**
     * @stability stable
     */
    resetIpamConfig() {
        this._ipamConfig = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get ipamConfigInput() {
        return this._ipamConfig;
    }
    /**
     * @stability stable
     */
    get labels() {
        return this.interpolationForAttribute('labels');
    }
    /**
     * @stability stable
     */
    set labels(value) {
        this._labels = value;
    }
    /**
     * @stability stable
     */
    resetLabels() {
        this._labels = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get labelsInput() {
        return this._labels;
    }
    // =========
    // SYNTHESIS
    // =========
    /**
     * @stability stable
     */
    synthesizeAttributes() {
        return {
            attachable: cdktf.booleanToTerraform(this._attachable),
            check_duplicate: cdktf.booleanToTerraform(this._checkDuplicate),
            driver: cdktf.stringToTerraform(this._driver),
            ingress: cdktf.booleanToTerraform(this._ingress),
            internal: cdktf.booleanToTerraform(this._internal),
            ipam_driver: cdktf.stringToTerraform(this._ipamDriver),
            ipv6: cdktf.booleanToTerraform(this._ipv6),
            name: cdktf.stringToTerraform(this._name),
            options: cdktf.hashMapper(cdktf.anyToTerraform)(this._options),
            ipam_config: cdktf.listMapper(networkIpamConfigToTerraform)(this._ipamConfig),
            labels: cdktf.listMapper(networkLabelsToTerraform)(this._labels),
        };
    }
}
exports.Network = Network;
_a = JSII_RTTI_SYMBOL_1;
Network[_a] = { fqn: "@cdktf/provider-docker.Network", version: "0.2.31" };
//# sourceMappingURL=data:application/json;base64,