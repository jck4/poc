import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * @stability stable
 */
export interface ContainerConfig extends cdktf.TerraformMetaArguments {
    /**
     * If `true` attach to the container after its creation and waits the end of its execution. Defaults to `false`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#attach Container#attach}
     *
     * @stability stable
     */
    readonly attach?: boolean;
    /**
     * The command to use to start the container.
     *
     * For example, to run `/usr/bin/myprogram -f baz.conf` set the command to be `["/usr/bin/myprogram","-","baz.con"]`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#command Container#command}
     *
     * @stability stable
     */
    readonly command?: string[];
    /**
     * A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#cpu_set Container#cpu_set}
     *
     * @stability stable
     */
    readonly cpuSet?: string;
    /**
     * CPU shares (relative weight) for the container.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#cpu_shares Container#cpu_shares}
     *
     * @stability stable
     */
    readonly cpuShares?: number;
    /**
     * If defined will attempt to stop the container before destroying.
     *
     * Container will be destroyed after `n` seconds or on successful stop.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#destroy_grace_seconds Container#destroy_grace_seconds}
     *
     * @stability stable
     */
    readonly destroyGraceSeconds?: number;
    /**
     * DNS servers to use.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#dns Container#dns}
     *
     * @stability stable
     */
    readonly dns?: string[];
    /**
     * DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#dns_opts Container#dns_opts}
     *
     * @stability stable
     */
    readonly dnsOpts?: string[];
    /**
     * DNS search domains that are used when bare unqualified hostnames are used inside of the container.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#dns_search Container#dns_search}
     *
     * @stability stable
     */
    readonly dnsSearch?: string[];
    /**
     * Domain name of the container.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#domainname Container#domainname}
     *
     * @stability stable
     */
    readonly domainname?: string;
    /**
     * The command to use as the Entrypoint for the container.
     *
     * The Entrypoint allows you to configure a container to run as an executable. For example, to run `/usr/bin/myprogram` when starting a container, set the entrypoint to be `"/usr/bin/myprogra"]`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#entrypoint Container#entrypoint}
     *
     * @stability stable
     */
    readonly entrypoint?: string[];
    /**
     * Environment variables to set in the form of `KEY=VALUE`, e.g. `DEBUG=0`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#env Container#env}
     *
     * @stability stable
     */
    readonly env?: string[];
    /**
     * Additional groups for the container user.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#group_add Container#group_add}
     *
     * @stability stable
     */
    readonly groupAdd?: string[];
    /**
     * Hostname of the container.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#hostname Container#hostname}
     *
     * @stability stable
     */
    readonly hostname?: string;
    /**
     * The ID of the image to back this container.
     *
     * The easiest way to get this value is to use the `docker_image` resource as is shown in the example.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#image Container#image}
     *
     * @stability stable
     */
    readonly image: string;
    /**
     * Configured whether an init process should be injected for this container.
     *
     * If unset this will default to the `dockerd` defaults.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#init Container#init}
     *
     * @stability stable
     */
    readonly init?: boolean;
    /**
     * IPC sharing mode for the container. Possible values are: `none`, `private`, `shareable`, `container:<name|id>` or `host`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#ipc_mode Container#ipc_mode}
     *
     * @stability stable
     */
    readonly ipcMode?: string;
    /**
     * Set of links for link based connectivity between containers that are running on the same host.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#links Container#links}
     *
     * @stability stable
     */
    readonly links?: string[];
    /**
     * The logging driver to use for the container. Defaults to `json-file`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#log_driver Container#log_driver}
     *
     * @stability stable
     */
    readonly logDriver?: string;
    /**
     * Key/value pairs to use as options for the logging driver.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#log_opts Container#log_opts}
     *
     * @stability stable
     */
    readonly logOpts?: {
        [key: string]: string;
    };
    /**
     * Save the container logs (`attach` must be enabled). Defaults to `false`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#logs Container#logs}
     *
     * @stability stable
     */
    readonly logs?: boolean;
    /**
     * The maximum amount of times to an attempt a restart when `restart` is set to 'on-failure'.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#max_retry_count Container#max_retry_count}
     *
     * @stability stable
     */
    readonly maxRetryCount?: number;
    /**
     * The memory limit for the container in MBs.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#memory Container#memory}
     *
     * @stability stable
     */
    readonly memory?: number;
    /**
     * The total memory limit (memory + swap) for the container in MBs.
     *
     * This setting may compute to `-1` after `terraform apply` if the target host doesn't support memory swap, when that is the case docker will use a soft limitation.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#memory_swap Container#memory_swap}
     *
     * @stability stable
     */
    readonly memorySwap?: number;
    /**
     * If `true`, then the Docker container will be kept running.
     *
     * If `false`, then as long as the container exists, Terraform assumes it is successful. Defaults to `true`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#must_run Container#must_run}
     *
     * @stability stable
     */
    readonly mustRun?: boolean;
    /**
     * The name of the container.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#name Container#name}
     *
     * @stability stable
     */
    readonly name: string;
    /**
     * Set an alias for the container in all specified networks.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#network_alias Container#network_alias}
     *
     * @stability stable
     */
    readonly networkAlias?: string[];
    /**
     * Network mode of the container.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#network_mode Container#network_mode}
     *
     * @stability stable
     */
    readonly networkMode?: string;
    /**
     * ID of the networks in which the container is.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#networks Container#networks}
     *
     * @stability stable
     */
    readonly networks?: string[];
    /**
     * he PID (Process) Namespace mode for the container. Either `container:<name|id>` or `host`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#pid_mode Container#pid_mode}
     *
     * @stability stable
     */
    readonly pidMode?: string;
    /**
     * If `true`, the container runs in privileged mode.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#privileged Container#privileged}
     *
     * @stability stable
     */
    readonly privileged?: boolean;
    /**
     * Publish all ports of the container.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#publish_all_ports Container#publish_all_ports}
     *
     * @stability stable
     */
    readonly publishAllPorts?: boolean;
    /**
     * If `true`, the container will be started as readonly. Defaults to `false`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#read_only Container#read_only}
     *
     * @stability stable
     */
    readonly readOnly?: boolean;
    /**
     * If `true`, it will remove anonymous volumes associated with the container. Defaults to `true`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#remove_volumes Container#remove_volumes}
     *
     * @stability stable
     */
    readonly removeVolumes?: boolean;
    /**
     * The restart policy for the container. Must be one of 'no', 'on-failure', 'always', 'unless-stopped'. Defaults to `no`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#restart Container#restart}
     *
     * @stability stable
     */
    readonly restart?: string;
    /**
     * If `true`, then the container will be automatically removed after his execution.
     *
     * Terraform won't check this container after creation. Defaults to `false`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#rm Container#rm}
     *
     * @stability stable
     */
    readonly rm?: boolean;
    /**
     * List of string values to customize labels for MLS systems, such as SELinux. See https://docs.docker.com/engine/reference/run/#security-configuration.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#security_opts Container#security_opts}
     *
     * @stability stable
     */
    readonly securityOpts?: string[];
    /**
     * Size of `/dev/shm` in MBs.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#shm_size Container#shm_size}
     *
     * @stability stable
     */
    readonly shmSize?: number;
    /**
     * If `true`, then the Docker container will be started after creation.
     *
     * If `false`, then the container is only created. Defaults to `true`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#start Container#start}
     *
     * @stability stable
     */
    readonly start?: boolean;
    /**
     * If `true`, keep STDIN open even if not attached (`docker run -i`). Defaults to `false`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#stdin_open Container#stdin_open}
     *
     * @stability stable
     */
    readonly stdinOpen?: boolean;
    /**
     * A map of kernel parameters (sysctls) to set in the container.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#sysctls Container#sysctls}
     *
     * @stability stable
     */
    readonly sysctls?: {
        [key: string]: string;
    };
    /**
     * A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#tmpfs Container#tmpfs}
     *
     * @stability stable
     */
    readonly tmpfs?: {
        [key: string]: string;
    };
    /**
     * If `true`, allocate a pseudo-tty (`docker run -t`). Defaults to `false`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#tty Container#tty}
     *
     * @stability stable
     */
    readonly tty?: boolean;
    /**
     * User used for run the first process.
     *
     * Format is `user` or `user:group` which user and group can be passed literraly or by name.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#user Container#user}
     *
     * @stability stable
     */
    readonly user?: string;
    /**
     * Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#userns_mode Container#userns_mode}
     *
     * @stability stable
     */
    readonly usernsMode?: string;
    /**
     * The working directory for commands to run in.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#working_dir Container#working_dir}
     *
     * @stability stable
     */
    readonly workingDir?: string;
    /**
     * capabilities block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#capabilities Container#capabilities}
     *
     * @stability stable
     */
    readonly capabilities?: ContainerCapabilities[];
    /**
     * devices block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#devices Container#devices}
     *
     * @stability stable
     */
    readonly devices?: ContainerDevices[];
    /**
     * healthcheck block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#healthcheck Container#healthcheck}
     *
     * @stability stable
     */
    readonly healthcheck?: ContainerHealthcheck[];
    /**
     * host block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#host Container#host}
     *
     * @stability stable
     */
    readonly host?: ContainerHost[];
    /**
     * labels block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#labels Container#labels}
     *
     * @stability stable
     */
    readonly labels?: ContainerLabels[];
    /**
     * mounts block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#mounts Container#mounts}
     *
     * @stability stable
     */
    readonly mounts?: ContainerMounts[];
    /**
     * networks_advanced block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#networks_advanced Container#networks_advanced}
     *
     * @stability stable
     */
    readonly networksAdvanced?: ContainerNetworksAdvanced[];
    /**
     * ports block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#ports Container#ports}
     *
     * @stability stable
     */
    readonly ports?: ContainerPorts[];
    /**
     * ulimit block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#ulimit Container#ulimit}
     *
     * @stability stable
     */
    readonly ulimit?: ContainerUlimit[];
    /**
     * upload block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#upload Container#upload}
     *
     * @stability stable
     */
    readonly upload?: ContainerUpload[];
    /**
     * volumes block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#volumes Container#volumes}
     *
     * @stability stable
     */
    readonly volumes?: ContainerVolumes[];
}
/**
 * @stability stable
 */
export declare class ContainerNetworkData extends cdktf.ComplexComputedList {
    /**
     * @stability stable
     */
    get gateway(): string;
    /**
     * @stability stable
     */
    get globalIpv6Address(): string;
    /**
     * @stability stable
     */
    get globalIpv6PrefixLength(): number;
    /**
     * @stability stable
     */
    get ipAddress(): string;
    /**
     * @stability stable
     */
    get ipPrefixLength(): number;
    /**
     * @stability stable
     */
    get ipv6Gateway(): string;
    /**
     * @stability stable
     */
    get networkName(): string;
}
/**
 * @stability stable
 */
export interface ContainerCapabilities {
    /**
     * List of linux capabilities to add.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#add Container#add}
     *
     * @stability stable
     */
    readonly add?: string[];
    /**
     * List of linux capabilities to drop.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#drop Container#drop}
     *
     * @stability stable
     */
    readonly drop?: string[];
}
/**
 * @stability stable
 */
export interface ContainerDevices {
    /**
     * The path in the container where the device will be bound.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#container_path Container#container_path}
     *
     * @stability stable
     */
    readonly containerPath?: string;
    /**
     * The path on the host where the device is located.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#host_path Container#host_path}
     *
     * @stability stable
     */
    readonly hostPath: string;
    /**
     * The cgroup permissions given to the container to access the device. Defaults to `rwm`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#permissions Container#permissions}
     *
     * @stability stable
     */
    readonly permissions?: string;
}
/**
 * @stability stable
 */
export interface ContainerHealthcheck {
    /**
     * Time between running the check (ms|s|m|h). Defaults to `0s`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#interval Container#interval}
     *
     * @stability stable
     */
    readonly interval?: string;
    /**
     * Consecutive failures needed to report unhealthy. Defaults to `0`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#retries Container#retries}
     *
     * @stability stable
     */
    readonly retries?: number;
    /**
     * Start period for the container to initialize before counting retries towards unstable (ms|s|m|h). Defaults to `0s`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#start_period Container#start_period}
     *
     * @stability stable
     */
    readonly startPeriod?: string;
    /**
     * Command to run to check health.
     *
     * For example, to run `curl -f localhost/health` set the command to be `["CMD", "curl", "-f", "localhost/health"]`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#test Container#test}
     *
     * @stability stable
     */
    readonly test: string[];
    /**
     * Maximum time to allow one check to run (ms|s|m|h). Defaults to `0s`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#timeout Container#timeout}
     *
     * @stability stable
     */
    readonly timeout?: string;
}
/**
 * @stability stable
 */
export interface ContainerHost {
    /**
     * Hostname to add.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#host Container#host}
     *
     * @stability stable
     */
    readonly host: string;
    /**
     * IP address this hostname should resolve to.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#ip Container#ip}
     *
     * @stability stable
     */
    readonly ip: string;
}
/**
 * @stability stable
 */
export interface ContainerLabels {
    /**
     * Name of the label.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#label Container#label}
     *
     * @stability stable
     */
    readonly label: string;
    /**
     * Value of the label.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#value Container#value}
     *
     * @stability stable
     */
    readonly value: string;
}
/**
 * @stability stable
 */
export interface ContainerMountsBindOptions {
    /**
     * A propagation mode with the value.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#propagation Container#propagation}
     *
     * @stability stable
     */
    readonly propagation?: string;
}
/**
 * @stability stable
 */
export interface ContainerMountsTmpfsOptions {
    /**
     * The permission mode for the tmpfs mount in an integer.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#mode Container#mode}
     *
     * @stability stable
     */
    readonly mode?: number;
    /**
     * The size for the tmpfs mount in bytes.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#size_bytes Container#size_bytes}
     *
     * @stability stable
     */
    readonly sizeBytes?: number;
}
/**
 * @stability stable
 */
export interface ContainerMountsVolumeOptionsLabels {
    /**
     * Name of the label.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#label Container#label}
     *
     * @stability stable
     */
    readonly label: string;
    /**
     * Value of the label.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#value Container#value}
     *
     * @stability stable
     */
    readonly value: string;
}
/**
 * @stability stable
 */
export interface ContainerMountsVolumeOptions {
    /**
     * Name of the driver to use to create the volume.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#driver_name Container#driver_name}
     *
     * @stability stable
     */
    readonly driverName?: string;
    /**
     * key/value map of driver specific options.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#driver_options Container#driver_options}
     *
     * @stability stable
     */
    readonly driverOptions?: {
        [key: string]: string;
    };
    /**
     * Populate volume with data from the target.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#no_copy Container#no_copy}
     *
     * @stability stable
     */
    readonly noCopy?: boolean;
    /**
     * labels block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#labels Container#labels}
     *
     * @stability stable
     */
    readonly labels?: ContainerMountsVolumeOptionsLabels[];
}
/**
 * @stability stable
 */
export interface ContainerMounts {
    /**
     * Whether the mount should be read-only.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#read_only Container#read_only}
     *
     * @stability stable
     */
    readonly readOnly?: boolean;
    /**
     * Mount source (e.g. a volume name, a host path).
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#source Container#source}
     *
     * @stability stable
     */
    readonly source?: string;
    /**
     * Container path.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#target Container#target}
     *
     * @stability stable
     */
    readonly target: string;
    /**
     * The mount type.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#type Container#type}
     *
     * @stability stable
     */
    readonly type: string;
    /**
     * bind_options block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#bind_options Container#bind_options}
     *
     * @stability stable
     */
    readonly bindOptions?: ContainerMountsBindOptions[];
    /**
     * tmpfs_options block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#tmpfs_options Container#tmpfs_options}
     *
     * @stability stable
     */
    readonly tmpfsOptions?: ContainerMountsTmpfsOptions[];
    /**
     * volume_options block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#volume_options Container#volume_options}
     *
     * @stability stable
     */
    readonly volumeOptions?: ContainerMountsVolumeOptions[];
}
/**
 * @stability stable
 */
export interface ContainerNetworksAdvanced {
    /**
     * The network aliases of the container in the specific network.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#aliases Container#aliases}
     *
     * @stability stable
     */
    readonly aliases?: string[];
    /**
     * The IPV4 address of the container in the specific network.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#ipv4_address Container#ipv4_address}
     *
     * @stability stable
     */
    readonly ipv4Address?: string;
    /**
     * The IPV6 address of the container in the specific network.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#ipv6_address Container#ipv6_address}
     *
     * @stability stable
     */
    readonly ipv6Address?: string;
    /**
     * The name of the network.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#name Container#name}
     *
     * @stability stable
     */
    readonly name: string;
}
/**
 * @stability stable
 */
export interface ContainerPorts {
    /**
     * Port exposed out of the container. If not given a free random port `>= 32768` will be used.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#external Container#external}
     *
     * @stability stable
     */
    readonly external?: number;
    /**
     * Port within the container.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#internal Container#internal}
     *
     * @stability stable
     */
    readonly internal: number;
    /**
     * IP address/mask that can access this port. Defaults to `0.0.0.0`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#ip Container#ip}
     *
     * @stability stable
     */
    readonly ip?: string;
    /**
     * Protocol that can be used over this port. Defaults to `tcp`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#protocol Container#protocol}
     *
     * @stability stable
     */
    readonly protocol?: string;
}
/**
 * @stability stable
 */
export interface ContainerUlimit {
    /**
     * The hard limit.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#hard Container#hard}
     *
     * @stability stable
     */
    readonly hard: number;
    /**
     * The name of the ulimit.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#name Container#name}
     *
     * @stability stable
     */
    readonly name: string;
    /**
     * The soft limit.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#soft Container#soft}
     *
     * @stability stable
     */
    readonly soft: number;
}
/**
 * @stability stable
 */
export interface ContainerUpload {
    /**
     * Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
     *
     * Conflicts with `content_base64` & `source`
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#content Container#content}
     *
     * @stability stable
     */
    readonly content?: string;
    /**
     * Base64-encoded data that will be decoded and uploaded as raw bytes for the object content.
     *
     * This allows safely uploading non-UTF8 binary data, but is recommended only for larger binary content such as the result of the `base64encode` interpolation function. See [here](https://github.com/terraform-providers/terraform-provider-docker/issues/48#issuecomment-374174588) for the reason. Conflicts with `content` & `source`
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#content_base64 Container#content_base64}
     *
     * @stability stable
     */
    readonly contentBase64?: string;
    /**
     * If `true`, the file will be uploaded with user executable permission. Defaults to `false`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#executable Container#executable}
     *
     * @stability stable
     */
    readonly executable?: boolean;
    /**
     * Path to the file in the container where is upload goes to.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#file Container#file}
     *
     * @stability stable
     */
    readonly file: string;
    /**
     * A filename that references a file which will be uploaded as the object content.
     *
     * This allows for large file uploads that do not get stored in state. Conflicts with `content` & `content_base64`
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#source Container#source}
     *
     * @stability stable
     */
    readonly source?: string;
    /**
     * If using `source`, this will force an update if the file content has updated but the filename has not.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#source_hash Container#source_hash}
     *
     * @stability stable
     */
    readonly sourceHash?: string;
}
/**
 * @stability stable
 */
export interface ContainerVolumes {
    /**
     * The path in the container where the volume will be mounted.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#container_path Container#container_path}
     *
     * @stability stable
     */
    readonly containerPath?: string;
    /**
     * The container where the volume is coming from.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#from_container Container#from_container}
     *
     * @stability stable
     */
    readonly fromContainer?: string;
    /**
     * The path on the host where the volume is coming from.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#host_path Container#host_path}
     *
     * @stability stable
     */
    readonly hostPath?: string;
    /**
     * If `true`, this volume will be readonly. Defaults to `false`.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#read_only Container#read_only}
     *
     * @stability stable
     */
    readonly readOnly?: boolean;
    /**
     * The name of the docker volume which should be mounted.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/r/container.html#volume_name Container#volume_name}
     *
     * @stability stable
     */
    readonly volumeName?: string;
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/docker/r/container.html docker_container}.
 *
 * @stability stable
 */
export declare class Container extends cdktf.TerraformResource {
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/docker/r/container.html docker_container} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config: ContainerConfig);
    private _attach?;
    /**
     * @stability stable
     */
    get attach(): boolean;
    /**
     * @stability stable
     */
    set attach(value: boolean);
    /**
     * @stability stable
     */
    resetAttach(): void;
    /**
     * @stability stable
     */
    get attachInput(): boolean | undefined;
    /**
     * @stability stable
     */
    get bridge(): string;
    private _command?;
    /**
     * @stability stable
     */
    get command(): string[];
    /**
     * @stability stable
     */
    set command(value: string[]);
    /**
     * @stability stable
     */
    resetCommand(): void;
    /**
     * @stability stable
     */
    get commandInput(): string[] | undefined;
    /**
     * @stability stable
     */
    get containerLogs(): string;
    private _cpuSet?;
    /**
     * @stability stable
     */
    get cpuSet(): string;
    /**
     * @stability stable
     */
    set cpuSet(value: string);
    /**
     * @stability stable
     */
    resetCpuSet(): void;
    /**
     * @stability stable
     */
    get cpuSetInput(): string | undefined;
    private _cpuShares?;
    /**
     * @stability stable
     */
    get cpuShares(): number;
    /**
     * @stability stable
     */
    set cpuShares(value: number);
    /**
     * @stability stable
     */
    resetCpuShares(): void;
    /**
     * @stability stable
     */
    get cpuSharesInput(): number | undefined;
    private _destroyGraceSeconds?;
    /**
     * @stability stable
     */
    get destroyGraceSeconds(): number;
    /**
     * @stability stable
     */
    set destroyGraceSeconds(value: number);
    /**
     * @stability stable
     */
    resetDestroyGraceSeconds(): void;
    /**
     * @stability stable
     */
    get destroyGraceSecondsInput(): number | undefined;
    private _dns?;
    /**
     * @stability stable
     */
    get dns(): string[];
    /**
     * @stability stable
     */
    set dns(value: string[]);
    /**
     * @stability stable
     */
    resetDns(): void;
    /**
     * @stability stable
     */
    get dnsInput(): string[] | undefined;
    private _dnsOpts?;
    /**
     * @stability stable
     */
    get dnsOpts(): string[];
    /**
     * @stability stable
     */
    set dnsOpts(value: string[]);
    /**
     * @stability stable
     */
    resetDnsOpts(): void;
    /**
     * @stability stable
     */
    get dnsOptsInput(): string[] | undefined;
    private _dnsSearch?;
    /**
     * @stability stable
     */
    get dnsSearch(): string[];
    /**
     * @stability stable
     */
    set dnsSearch(value: string[]);
    /**
     * @stability stable
     */
    resetDnsSearch(): void;
    /**
     * @stability stable
     */
    get dnsSearchInput(): string[] | undefined;
    private _domainname?;
    /**
     * @stability stable
     */
    get domainname(): string;
    /**
     * @stability stable
     */
    set domainname(value: string);
    /**
     * @stability stable
     */
    resetDomainname(): void;
    /**
     * @stability stable
     */
    get domainnameInput(): string | undefined;
    private _entrypoint?;
    /**
     * @stability stable
     */
    get entrypoint(): string[];
    /**
     * @stability stable
     */
    set entrypoint(value: string[]);
    /**
     * @stability stable
     */
    resetEntrypoint(): void;
    /**
     * @stability stable
     */
    get entrypointInput(): string[] | undefined;
    private _env?;
    /**
     * @stability stable
     */
    get env(): string[];
    /**
     * @stability stable
     */
    set env(value: string[]);
    /**
     * @stability stable
     */
    resetEnv(): void;
    /**
     * @stability stable
     */
    get envInput(): string[] | undefined;
    /**
     * @stability stable
     */
    get exitCode(): number;
    /**
     * @stability stable
     */
    get gateway(): string;
    private _groupAdd?;
    /**
     * @stability stable
     */
    get groupAdd(): string[];
    /**
     * @stability stable
     */
    set groupAdd(value: string[]);
    /**
     * @stability stable
     */
    resetGroupAdd(): void;
    /**
     * @stability stable
     */
    get groupAddInput(): string[] | undefined;
    private _hostname?;
    /**
     * @stability stable
     */
    get hostname(): string;
    /**
     * @stability stable
     */
    set hostname(value: string);
    /**
     * @stability stable
     */
    resetHostname(): void;
    /**
     * @stability stable
     */
    get hostnameInput(): string | undefined;
    /**
     * @stability stable
     */
    get id(): string;
    private _image;
    /**
     * @stability stable
     */
    get image(): string;
    /**
     * @stability stable
     */
    set image(value: string);
    /**
     * @stability stable
     */
    get imageInput(): string;
    private _init?;
    /**
     * @stability stable
     */
    get init(): boolean;
    /**
     * @stability stable
     */
    set init(value: boolean);
    /**
     * @stability stable
     */
    resetInit(): void;
    /**
     * @stability stable
     */
    get initInput(): boolean | undefined;
    /**
     * @stability stable
     */
    get ipAddress(): string;
    /**
     * @stability stable
     */
    get ipPrefixLength(): number;
    private _ipcMode?;
    /**
     * @stability stable
     */
    get ipcMode(): string;
    /**
     * @stability stable
     */
    set ipcMode(value: string);
    /**
     * @stability stable
     */
    resetIpcMode(): void;
    /**
     * @stability stable
     */
    get ipcModeInput(): string | undefined;
    private _links?;
    /**
     * @stability stable
     */
    get links(): string[];
    /**
     * @stability stable
     */
    set links(value: string[]);
    /**
     * @stability stable
     */
    resetLinks(): void;
    /**
     * @stability stable
     */
    get linksInput(): string[] | undefined;
    private _logDriver?;
    /**
     * @stability stable
     */
    get logDriver(): string;
    /**
     * @stability stable
     */
    set logDriver(value: string);
    /**
     * @stability stable
     */
    resetLogDriver(): void;
    /**
     * @stability stable
     */
    get logDriverInput(): string | undefined;
    private _logOpts?;
    /**
     * @stability stable
     */
    get logOpts(): {
        [key: string]: string;
    };
    /**
     * @stability stable
     */
    set logOpts(value: {
        [key: string]: string;
    });
    /**
     * @stability stable
     */
    resetLogOpts(): void;
    /**
     * @stability stable
     */
    get logOptsInput(): {
        [key: string]: string;
    } | undefined;
    private _logs?;
    /**
     * @stability stable
     */
    get logs(): boolean;
    /**
     * @stability stable
     */
    set logs(value: boolean);
    /**
     * @stability stable
     */
    resetLogs(): void;
    /**
     * @stability stable
     */
    get logsInput(): boolean | undefined;
    private _maxRetryCount?;
    /**
     * @stability stable
     */
    get maxRetryCount(): number;
    /**
     * @stability stable
     */
    set maxRetryCount(value: number);
    /**
     * @stability stable
     */
    resetMaxRetryCount(): void;
    /**
     * @stability stable
     */
    get maxRetryCountInput(): number | undefined;
    private _memory?;
    /**
     * @stability stable
     */
    get memory(): number;
    /**
     * @stability stable
     */
    set memory(value: number);
    /**
     * @stability stable
     */
    resetMemory(): void;
    /**
     * @stability stable
     */
    get memoryInput(): number | undefined;
    private _memorySwap?;
    /**
     * @stability stable
     */
    get memorySwap(): number;
    /**
     * @stability stable
     */
    set memorySwap(value: number);
    /**
     * @stability stable
     */
    resetMemorySwap(): void;
    /**
     * @stability stable
     */
    get memorySwapInput(): number | undefined;
    private _mustRun?;
    /**
     * @stability stable
     */
    get mustRun(): boolean;
    /**
     * @stability stable
     */
    set mustRun(value: boolean);
    /**
     * @stability stable
     */
    resetMustRun(): void;
    /**
     * @stability stable
     */
    get mustRunInput(): boolean | undefined;
    private _name;
    /**
     * @stability stable
     */
    get name(): string;
    /**
     * @stability stable
     */
    set name(value: string);
    /**
     * @stability stable
     */
    get nameInput(): string;
    private _networkAlias?;
    /**
     * @stability stable
     */
    get networkAlias(): string[];
    /**
     * @stability stable
     */
    set networkAlias(value: string[]);
    /**
     * @stability stable
     */
    resetNetworkAlias(): void;
    /**
     * @stability stable
     */
    get networkAliasInput(): string[] | undefined;
    /**
     * @stability stable
     */
    networkData(index: string): ContainerNetworkData;
    private _networkMode?;
    /**
     * @stability stable
     */
    get networkMode(): string;
    /**
     * @stability stable
     */
    set networkMode(value: string);
    /**
     * @stability stable
     */
    resetNetworkMode(): void;
    /**
     * @stability stable
     */
    get networkModeInput(): string | undefined;
    private _networks?;
    /**
     * @stability stable
     */
    get networks(): string[];
    /**
     * @stability stable
     */
    set networks(value: string[]);
    /**
     * @stability stable
     */
    resetNetworks(): void;
    /**
     * @stability stable
     */
    get networksInput(): string[] | undefined;
    private _pidMode?;
    /**
     * @stability stable
     */
    get pidMode(): string;
    /**
     * @stability stable
     */
    set pidMode(value: string);
    /**
     * @stability stable
     */
    resetPidMode(): void;
    /**
     * @stability stable
     */
    get pidModeInput(): string | undefined;
    private _privileged?;
    /**
     * @stability stable
     */
    get privileged(): boolean;
    /**
     * @stability stable
     */
    set privileged(value: boolean);
    /**
     * @stability stable
     */
    resetPrivileged(): void;
    /**
     * @stability stable
     */
    get privilegedInput(): boolean | undefined;
    private _publishAllPorts?;
    /**
     * @stability stable
     */
    get publishAllPorts(): boolean;
    /**
     * @stability stable
     */
    set publishAllPorts(value: boolean);
    /**
     * @stability stable
     */
    resetPublishAllPorts(): void;
    /**
     * @stability stable
     */
    get publishAllPortsInput(): boolean | undefined;
    private _readOnly?;
    /**
     * @stability stable
     */
    get readOnly(): boolean;
    /**
     * @stability stable
     */
    set readOnly(value: boolean);
    /**
     * @stability stable
     */
    resetReadOnly(): void;
    /**
     * @stability stable
     */
    get readOnlyInput(): boolean | undefined;
    private _removeVolumes?;
    /**
     * @stability stable
     */
    get removeVolumes(): boolean;
    /**
     * @stability stable
     */
    set removeVolumes(value: boolean);
    /**
     * @stability stable
     */
    resetRemoveVolumes(): void;
    /**
     * @stability stable
     */
    get removeVolumesInput(): boolean | undefined;
    private _restart?;
    /**
     * @stability stable
     */
    get restart(): string;
    /**
     * @stability stable
     */
    set restart(value: string);
    /**
     * @stability stable
     */
    resetRestart(): void;
    /**
     * @stability stable
     */
    get restartInput(): string | undefined;
    private _rm?;
    /**
     * @stability stable
     */
    get rm(): boolean;
    /**
     * @stability stable
     */
    set rm(value: boolean);
    /**
     * @stability stable
     */
    resetRm(): void;
    /**
     * @stability stable
     */
    get rmInput(): boolean | undefined;
    private _securityOpts?;
    /**
     * @stability stable
     */
    get securityOpts(): string[];
    /**
     * @stability stable
     */
    set securityOpts(value: string[]);
    /**
     * @stability stable
     */
    resetSecurityOpts(): void;
    /**
     * @stability stable
     */
    get securityOptsInput(): string[] | undefined;
    private _shmSize?;
    /**
     * @stability stable
     */
    get shmSize(): number;
    /**
     * @stability stable
     */
    set shmSize(value: number);
    /**
     * @stability stable
     */
    resetShmSize(): void;
    /**
     * @stability stable
     */
    get shmSizeInput(): number | undefined;
    private _start?;
    /**
     * @stability stable
     */
    get start(): boolean;
    /**
     * @stability stable
     */
    set start(value: boolean);
    /**
     * @stability stable
     */
    resetStart(): void;
    /**
     * @stability stable
     */
    get startInput(): boolean | undefined;
    private _stdinOpen?;
    /**
     * @stability stable
     */
    get stdinOpen(): boolean;
    /**
     * @stability stable
     */
    set stdinOpen(value: boolean);
    /**
     * @stability stable
     */
    resetStdinOpen(): void;
    /**
     * @stability stable
     */
    get stdinOpenInput(): boolean | undefined;
    private _sysctls?;
    /**
     * @stability stable
     */
    get sysctls(): {
        [key: string]: string;
    };
    /**
     * @stability stable
     */
    set sysctls(value: {
        [key: string]: string;
    });
    /**
     * @stability stable
     */
    resetSysctls(): void;
    /**
     * @stability stable
     */
    get sysctlsInput(): {
        [key: string]: string;
    } | undefined;
    private _tmpfs?;
    /**
     * @stability stable
     */
    get tmpfs(): {
        [key: string]: string;
    };
    /**
     * @stability stable
     */
    set tmpfs(value: {
        [key: string]: string;
    });
    /**
     * @stability stable
     */
    resetTmpfs(): void;
    /**
     * @stability stable
     */
    get tmpfsInput(): {
        [key: string]: string;
    } | undefined;
    private _tty?;
    /**
     * @stability stable
     */
    get tty(): boolean;
    /**
     * @stability stable
     */
    set tty(value: boolean);
    /**
     * @stability stable
     */
    resetTty(): void;
    /**
     * @stability stable
     */
    get ttyInput(): boolean | undefined;
    private _user?;
    /**
     * @stability stable
     */
    get user(): string;
    /**
     * @stability stable
     */
    set user(value: string);
    /**
     * @stability stable
     */
    resetUser(): void;
    /**
     * @stability stable
     */
    get userInput(): string | undefined;
    private _usernsMode?;
    /**
     * @stability stable
     */
    get usernsMode(): string;
    /**
     * @stability stable
     */
    set usernsMode(value: string);
    /**
     * @stability stable
     */
    resetUsernsMode(): void;
    /**
     * @stability stable
     */
    get usernsModeInput(): string | undefined;
    private _workingDir?;
    /**
     * @stability stable
     */
    get workingDir(): string;
    /**
     * @stability stable
     */
    set workingDir(value: string);
    /**
     * @stability stable
     */
    resetWorkingDir(): void;
    /**
     * @stability stable
     */
    get workingDirInput(): string | undefined;
    private _capabilities?;
    /**
     * @stability stable
     */
    get capabilities(): ContainerCapabilities[];
    /**
     * @stability stable
     */
    set capabilities(value: ContainerCapabilities[]);
    /**
     * @stability stable
     */
    resetCapabilities(): void;
    /**
     * @stability stable
     */
    get capabilitiesInput(): ContainerCapabilities[] | undefined;
    private _devices?;
    /**
     * @stability stable
     */
    get devices(): ContainerDevices[];
    /**
     * @stability stable
     */
    set devices(value: ContainerDevices[]);
    /**
     * @stability stable
     */
    resetDevices(): void;
    /**
     * @stability stable
     */
    get devicesInput(): ContainerDevices[] | undefined;
    private _healthcheck?;
    /**
     * @stability stable
     */
    get healthcheck(): ContainerHealthcheck[];
    /**
     * @stability stable
     */
    set healthcheck(value: ContainerHealthcheck[]);
    /**
     * @stability stable
     */
    resetHealthcheck(): void;
    /**
     * @stability stable
     */
    get healthcheckInput(): ContainerHealthcheck[] | undefined;
    private _host?;
    /**
     * @stability stable
     */
    get host(): ContainerHost[];
    /**
     * @stability stable
     */
    set host(value: ContainerHost[]);
    /**
     * @stability stable
     */
    resetHost(): void;
    /**
     * @stability stable
     */
    get hostInput(): ContainerHost[] | undefined;
    private _labels?;
    /**
     * @stability stable
     */
    get labels(): ContainerLabels[];
    /**
     * @stability stable
     */
    set labels(value: ContainerLabels[]);
    /**
     * @stability stable
     */
    resetLabels(): void;
    /**
     * @stability stable
     */
    get labelsInput(): ContainerLabels[] | undefined;
    private _mounts?;
    /**
     * @stability stable
     */
    get mounts(): ContainerMounts[];
    /**
     * @stability stable
     */
    set mounts(value: ContainerMounts[]);
    /**
     * @stability stable
     */
    resetMounts(): void;
    /**
     * @stability stable
     */
    get mountsInput(): ContainerMounts[] | undefined;
    private _networksAdvanced?;
    /**
     * @stability stable
     */
    get networksAdvanced(): ContainerNetworksAdvanced[];
    /**
     * @stability stable
     */
    set networksAdvanced(value: ContainerNetworksAdvanced[]);
    /**
     * @stability stable
     */
    resetNetworksAdvanced(): void;
    /**
     * @stability stable
     */
    get networksAdvancedInput(): ContainerNetworksAdvanced[] | undefined;
    private _ports?;
    /**
     * @stability stable
     */
    get ports(): ContainerPorts[];
    /**
     * @stability stable
     */
    set ports(value: ContainerPorts[]);
    /**
     * @stability stable
     */
    resetPorts(): void;
    /**
     * @stability stable
     */
    get portsInput(): ContainerPorts[] | undefined;
    private _ulimit?;
    /**
     * @stability stable
     */
    get ulimit(): ContainerUlimit[];
    /**
     * @stability stable
     */
    set ulimit(value: ContainerUlimit[]);
    /**
     * @stability stable
     */
    resetUlimit(): void;
    /**
     * @stability stable
     */
    get ulimitInput(): ContainerUlimit[] | undefined;
    private _upload?;
    /**
     * @stability stable
     */
    get upload(): ContainerUpload[];
    /**
     * @stability stable
     */
    set upload(value: ContainerUpload[]);
    /**
     * @stability stable
     */
    resetUpload(): void;
    /**
     * @stability stable
     */
    get uploadInput(): ContainerUpload[] | undefined;
    private _volumes?;
    /**
     * @stability stable
     */
    get volumes(): ContainerVolumes[];
    /**
     * @stability stable
     */
    set volumes(value: ContainerVolumes[]);
    /**
     * @stability stable
     */
    resetVolumes(): void;
    /**
     * @stability stable
     */
    get volumesInput(): ContainerVolumes[] | undefined;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
