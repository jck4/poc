import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * @stability stable
 */
export interface DataDockerPluginConfig extends cdktf.TerraformMetaArguments {
    /**
     * The alias of the Docker plugin. If the tag is omitted, `:latest` is complemented to the attribute value.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/d/plugin.html#alias DataDockerPlugin#alias}
     *
     * @stability stable
     */
    readonly alias?: string;
    /**
     * The ID of the plugin, which has precedence over the `alias` of both are given.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/docker/d/plugin.html#id DataDockerPlugin#id}
     *
     * @stability stable
     */
    readonly id?: string;
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/docker/d/plugin.html docker_plugin}.
 *
 * @stability stable
 */
export declare class DataDockerPlugin extends cdktf.TerraformDataSource {
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/docker/d/plugin.html docker_plugin} Data Source.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config?: DataDockerPluginConfig);
    private _alias?;
    /**
     * @stability stable
     */
    get alias(): string;
    /**
     * @stability stable
     */
    set alias(value: string);
    /**
     * @stability stable
     */
    resetAlias(): void;
    /**
     * @stability stable
     */
    get aliasInput(): string | undefined;
    /**
     * @stability stable
     */
    get enabled(): boolean;
    /**
     * @stability stable
     */
    get env(): string[];
    /**
     * @stability stable
     */
    get grantAllPermissions(): boolean;
    private _id?;
    /**
     * @stability stable
     */
    get id(): string;
    /**
     * @stability stable
     */
    set id(value: string);
    /**
     * @stability stable
     */
    resetId(): void;
    /**
     * @stability stable
     */
    get idInput(): string | undefined;
    /**
     * @stability stable
     */
    get name(): string;
    /**
     * @stability stable
     */
    get pluginReference(): string;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
